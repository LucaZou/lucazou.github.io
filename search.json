[{"categories":["教程"],"content":"网络适配器 网络连接选择NAT模式 ","date":"2025-03-12","objectID":"/posts/20250312151839/:1:0","tags":["VMware","ssh"],"title":"windows 宿主机ssh连接VMware虚拟机","uri":"/posts/20250312151839/"},{"categories":["教程"],"content":"获取宿主机和虚拟机的ip地址 ","date":"2025-03-12","objectID":"/posts/20250312151839/:2:0","tags":["VMware","ssh"],"title":"windows 宿主机ssh连接VMware虚拟机","uri":"/posts/20250312151839/"},{"categories":["教程"],"content":"宿主机： 在cmd输入命令： ipconfig 此处物理机正在使用的无线网络，所以IP地址是10.151.*** . *** ","date":"2025-03-12","objectID":"/posts/20250312151839/:2:1","tags":["VMware","ssh"],"title":"windows 宿主机ssh连接VMware虚拟机","uri":"/posts/20250312151839/"},{"categories":["教程"],"content":"虚拟机： 在虚拟机终端输入： ifconfig 此处虚拟机IP地址为：192.168.131.130 注意：ifconfig如果提示不存在按提示安装即可 yum install net-tools #centos apt install net-tools #Debian ","date":"2025-03-12","objectID":"/posts/20250312151839/:2:2","tags":["VMware","ssh"],"title":"windows 宿主机ssh连接VMware虚拟机","uri":"/posts/20250312151839/"},{"categories":["教程"],"content":"虚拟机和宿主机IP映射 编辑–\u003e虚拟网络编辑器: 选择VMnet8,更改设置 选择 VMnet8，点击 NAT 设置 点击添加 将虚拟机的IP地址和端口号填入(端口默认22) 确定保存 ","date":"2025-03-12","objectID":"/posts/20250312151839/:3:0","tags":["VMware","ssh"],"title":"windows 宿主机ssh连接VMware虚拟机","uri":"/posts/20250312151839/"},{"categories":["教程"],"content":"在虚拟机安装ssh服务 openssh-client： sudo apt-get install openssh-client openssh-server： sudo apt-get install openssh-server 启动 ssh-server： sudo /etc/init.d/ssh restart 确认 ssh-server 工作正常： netstat -tpl # 看到 ssh 表示工作正常 ","date":"2025-03-12","objectID":"/posts/20250312151839/:4:0","tags":["VMware","ssh"],"title":"windows 宿主机ssh连接VMware虚拟机","uri":"/posts/20250312151839/"},{"categories":["教程"],"content":"设置服务器允许root用户ssh登录 完成以上步骤之后仍有可能连接不上服务器,这是因为有些系统不允许ssh使用root用户登录 ","date":"2025-03-12","objectID":"/posts/20250312151839/:5:0","tags":["VMware","ssh"],"title":"windows 宿主机ssh连接VMware虚拟机","uri":"/posts/20250312151839/"},{"categories":["教程"],"content":"修改/etc/ssh/sshd_config文件 vim /etc/ssh/sshd_config 设置以下两项为yes PermitRootLogin yes PasswordAuthentication yes 完成后重启服务器或者ssh即可 ","date":"2025-03-12","objectID":"/posts/20250312151839/:5:1","tags":["VMware","ssh"],"title":"windows 宿主机ssh连接VMware虚拟机","uri":"/posts/20250312151839/"},{"categories":["项目文档"],"content":"Flask MVC Pepper Schedule 项目文档 ","date":"2025-03-07","objectID":"/posts/20250307182802/:1:0","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"1. 项目概述 项目名称: Flask MVC Pepper Schedule 版本: 1.0（根据代码推测，无明确版本号） 描述: 一个基于 Flask 的 Web 应用程序，用于用户注册登录、日程管理、邮件与短信提醒、文件上传及管理员后台管理。项目采用 MVC 架构，通过 Blueprint 模块化设计，支持 RESTful API 和前端模板渲染。 目标用户: 需要日程管理和提醒功能的用户，以及需要管理用户和事件的管理员。 当前日期: 2025年3月6日（基于您的输入） ","date":"2025-03-07","objectID":"/posts/20250307182802/:2:0","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"2. 功能模块 ","date":"2025-03-07","objectID":"/posts/20250307182802/:3:0","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"2.1 用户管理 功能: 注册: 用户通过邮箱、用户名、电话和密码注册账户。 登录: 使用邮箱和密码登录，支持“记住我”功能。 登出: 注销当前用户会话。 个人信息: 查看用户名、邮箱和电话。 路由: /register (GET/POST): 注册页面 /login (GET/POST): 登录页面 /logout (GET): 登出 /profile (GET/POST): 个人信息页面 依赖: Flask-Login, Flask-WTF, werkzeug.security ","date":"2025-03-07","objectID":"/posts/20250307182802/:3:1","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"2.2 事件管理 功能: 创建事件: 输入标题、时间、地点、描述、重复类型和提醒设置。 查看事件: 显示今天事件和过期事件，支持重复事件动态生成。 编辑/删除事件: 修改或删除已有事件，仅限创建者操作。 日历视图: 显示所有事件。 RESTful API: 获取用户事件数据。 路由: /event_list (GET): 事件列表 /create_event (GET/POST): 创建事件 /delete_event/\u003cint:event_id\u003e (POST): 删除事件 /edit_event/\u003cint:event_id\u003e (GET/POST): 编辑事件 /calendar (GET): 日历视图 API: GET /event/\u003cuser_id\u003e: 获取用户事件 依赖: Flask-SQLAlchemy, Flask-WTF ","date":"2025-03-07","objectID":"/posts/20250307182802/:3:2","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"2.3 提醒功能 功能: 邮件提醒: 发送 HTML 格式的提醒邮件，记录发送历史。 短信提醒: 使用阿里云 SMS 服务发送短信。 浏览器提醒: 定时检查事件并打印提醒日志（未实现前端通知）。 路由: /send_email (GET/POST): 发送邮件 /email_history (GET): 查看邮件历史 /delete_email_history/\u003cint:email_history_id\u003e (POST): 删除邮件历史 API: POST /email: 发送邮件 POST /sms: 发送短信 依赖: Flask-Mail, Flask-Scheduler, aliyunsdkdysmsapi ","date":"2025-03-07","objectID":"/posts/20250307182802/:3:3","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"2.4 文件上传与相册 功能: 上传文件: 支持图片上传，文件按时间戳命名。 相册: 显示上传的图片列表。 路由: /album_list (GET): 相册页面 API: POST /upload: 上传文件 依赖: Flask-Uploads ","date":"2025-03-07","objectID":"/posts/20250307182802/:3:4","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"2.5 管理后台 功能: 管理 User, Event, EmailHistory 表数据，仅限管理员访问。 支持搜索、排序和关联字段显示。 依赖: Flask-Admin ","date":"2025-03-07","objectID":"/posts/20250307182802/:3:5","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"2.6 首页与关于 功能: 首页: 显示用户的事件列表。 关于: 静态页面。 路由: / (GET): 首页 /about (GET): 关于页面 ","date":"2025-03-07","objectID":"/posts/20250307182802/:3:6","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"3. 技术栈 后端框架: Flask 数据库: MySQL (via SQLAlchemy) 用户认证: Flask-Login 表单验证: Flask-WTF 邮件服务: Flask-Mail (QQ SMTP) 文件上传: Flask-Uploads 定时任务: Flask-Scheduler 管理后台: Flask-Admin RESTful API: Flask-RESTful 短信服务: 阿里云 SMS SDK 日志: Python logging 环境变量: python-dotenv ","date":"2025-03-07","objectID":"/posts/20250307182802/:4:0","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"4. 安装与运行指南 ","date":"2025-03-07","objectID":"/posts/20250307182802/:5:0","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"4.1 环境要求 Python 3.6+ MySQL 数据库 阿里云 SMS 服务账号（可选） QQ 邮箱 SMTP 配置 ","date":"2025-03-07","objectID":"/posts/20250307182802/:5:1","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"4.2 安装步骤 克隆项目: git clone \u003crepository_url\u003e cd flask-mvc-pepper-schedule 创建虚拟环境: python -m venv venv source venv/bin/activate # Linux/Mac venv\\Scripts\\activate # Windows 安装依赖: pip install -r requirements.txt 注: 项目未提供 requirements.txt，建议手动安装以下库： flask flask-sqlalchemy flask-login flask-mail flask-uploads flask-admin flask-restful flask-wtf flask-scheduler pymysql python-dotenv aliyunsdkcore aliyunsdkdysmsapi werkzeug 配置环境变量: 创建 .env 文件，添加以下内容： MAIL_PASSWORD=\u003cyour_qq_email_password\u003e ALIYUN_ACCESS_KEY_ID=\u003cyour_aliyun_access_key_id\u003e ALIYUN_ACCESS_KEY_SECRET=\u003cyour_aliyun_access_key_secret\u003e API_TOKEN=\u003cyour_api_token\u003e 初始化数据库: 配置 SQLALCHEMY_DATABASE_URI（默认 mysql+pymysql://root:123456@localhost/schedule） 运行以下命令创建表： from app import db, create_app app = create_app() with app.app_context(): db.create_all() 运行应用: python main.py 默认访问: http://127.0.0.1:5000 ","date":"2025-03-07","objectID":"/posts/20250307182802/:5:2","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"5. API 说明 ","date":"2025-03-07","objectID":"/posts/20250307182802/:6:0","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"5.1 事件资源 (EventResource) GET /event/\u003cuser_id\u003e: 描述: 获取指定用户的事件。 参数: user_id (int) Header: Authorization: \u003cAPI_TOKEN\u003e 返回: JSON { \"events\": [{\"id\": 1, \"title\": \"Meeting\", ...}], \"expired_events\": [{\"id\": 2, \"title\": \"Old Event\", ...}] } ","date":"2025-03-07","objectID":"/posts/20250307182802/:6:1","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"5.2 消息资源 (MessageResource) POST /message: 描述: 接收消息并存储。 Body: {\"message\": \"test\"} 返回: JSON {\"message\": \"test\"} ","date":"2025-03-07","objectID":"/posts/20250307182802/:6:2","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"5.3 邮件资源 (EmailResource) POST /email: 描述: 发送邮件。 Header: Authorization: \u003cAPI_TOKEN\u003e Body: {\"title\": \"Test\", \"content\": \"Hello\", \"recipients\": [\"user@example.com\"]} 返回: JSON {\"message\": \"邮件发送成功\"} ","date":"2025-03-07","objectID":"/posts/20250307182802/:6:3","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"5.4 短信资源 (SMSResource) POST /sms: 描述: 发送短信。 Header: Authorization: \u003cAPI_TOKEN\u003e Body: {\"phone_number\": \"12345678901\", \"message\": \"Hello\"} 返回: JSON {\"status\": \"success\", \"result\": {...}} ","date":"2025-03-07","objectID":"/posts/20250307182802/:6:4","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"5.5 文件上传资源 (FileUploadResource) POST /upload: 描述: 上传图片文件。 Body: Form-data (photo: 文件) 返回: JSON {\"status\": \"success\", \"file_url\": \"/static/uploads/images/2025/03/06/1234567890.jpg\"} ","date":"2025-03-07","objectID":"/posts/20250307182802/:6:5","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"6. 数据库设计 ","date":"2025-03-07","objectID":"/posts/20250307182802/:7:0","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"6.1 User 表 表名: users 字段: id: Integer, 主键 name: String(255), 非空 email: String(255), 非空，唯一 phone: String(255), 非空 password_hash: String(255), 非空 is_admin: Boolean, 默认 False 关系: 一对多 (Event, EmailHistory) ","date":"2025-03-07","objectID":"/posts/20250307182802/:7:1","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"6.2 Event 表 表名: events 字段: id: Integer, 主键 user_id: Integer, 外键 (users.id) title: String(255), 非空 start_date: Date, 非空 event_time: Time end_date: Date location: String(255) description: String(255) repeat: String(255), 默认 “none” reminder_type: String(255), 默认 “none” reminder_time: Float, 默认 0 关系: 多对一 (User) ","date":"2025-03-07","objectID":"/posts/20250307182802/:7:2","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"6.3 EmailHistory 表 表名: email_history 字段: id: Integer, 主键 user_id: Integer, 外键 (users.id) title: String(255), 非空 content: Text, 非空 recipients: String(255), 非空 sent_at: DateTime, 默认当前时间 关系: 多对一 (User) ","date":"2025-03-07","objectID":"/posts/20250307182802/:7:3","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"7. 潜在改进建议 ","date":"2025-03-07","objectID":"/posts/20250307182802/:8:0","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"7.1 功能完善 添加密码重置和用户个人信息编辑功能。 增强重复事件逻辑，支持更复杂的规则（如“每月的第几天”）。 实现浏览器提醒的前端通知（使用 WebSocket 或推送服务）。 ","date":"2025-03-07","objectID":"/posts/20250307182802/:8:1","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"7.2 性能优化 RESTful API 添加分页和缓存机制。 使用分布式任务队列（如 Celery）优化定时任务。 ","date":"2025-03-07","objectID":"/posts/20250307182802/:8:2","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"7.3 用户体验 添加事件搜索和过滤功能。 相册支持分类、删除和预览。 ","date":"2025-03-07","objectID":"/posts/20250307182802/:8:3","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"7.4 安全性 限制上传文件的大小和类型。 API 添加速率限制和详细错误码。 ","date":"2025-03-07","objectID":"/posts/20250307182802/:8:4","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":"7.5 部署 配置生产环境（如 Gunicorn + Nginx）。 生成 API 文档（如 Swagger）。 ","date":"2025-03-07","objectID":"/posts/20250307182802/:8:5","tags":["flask","日程管理系统"],"title":"Flask MVC Pepper Schedule 项目文档","uri":"/posts/20250307182802/"},{"categories":["项目文档"],"content":" 上篇已经以用户注册登录为例创建了一个完整的demo，这篇继续在原有的基础上添加日程管理模块的代码，这也是整个项目中最核心的代码。 ","date":"2025-03-07","objectID":"/posts/20250307182650/:0:0","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（三）】项目组成-Web开发篇-日程逻辑的创建","uri":"/posts/20250307182650/"},{"categories":["项目文档"],"content":"前言 上篇已经以用户注册登录为例创建了一个完整的demo，这篇继续在原有的基础上添加日程管理模块的代码，这也是整个项目中最核心的代码。 ","date":"2025-03-07","objectID":"/posts/20250307182650/:1:0","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（三）】项目组成-Web开发篇-日程逻辑的创建","uri":"/posts/20250307182650/"},{"categories":["项目文档"],"content":"日程管理的实现 按照MVC的模式一般是:模型–\u003e视图–\u003e控制器的顺序 ","date":"2025-03-07","objectID":"/posts/20250307182650/:2:0","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（三）】项目组成-Web开发篇-日程逻辑的创建","uri":"/posts/20250307182650/"},{"categories":["项目文档"],"content":"创建模型 模型的创建其实在上篇中已经完成: Event.py: from app import db from app.model.User import User from sqlalchemy.ext.hybrid import hybrid_property class Event(db.Model): __tablename__ = 'events' id = db.Column(db.Integer, primary_key=True) user_id = db.Column(db.Integer, db.ForeignKey(User.id, ondelete='CASCADE'), nullable=False) title = db.Column(db.String(255), nullable=False) start_date = db.Column(db.Date, nullable=False) event_time = db.Column(db.Time) end_date = db.Column(db.Date) location = db.Column(db.String(255)) description = db.Column(db.String(255)) repeat = db.Column(db.String(255), nullable=False, default=\"none\") # Text field for custom repeat types reminder_type = db.Column(db.String(255), nullable=False, default=\"none\") reminder_time = db.Column(db.Float, nullable=True, default=0) @hybrid_property def duration(self): return self.end_date - self.start_date def __init__(self, user_id, title, start_date, event_time, end_date, location, description, reminder_time, repeat, reminder_type): self.user_id = user_id self.title = title self.start_date = start_date self.event_time = event_time self.end_date = end_date self.location = location self.description = description self.repeat = repeat self.reminder_type = reminder_type self.reminder_time = reminder_time def __repr__(self): return '\u003cEvent %r\u003e' % self.title ","date":"2025-03-07","objectID":"/posts/20250307182650/:3:0","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（三）】项目组成-Web开发篇-日程逻辑的创建","uri":"/posts/20250307182650/"},{"categories":["项目文档"],"content":"创建视图 考虑到业务需求,主要是对Event表进行CRUD操作,所以在event蓝图下创建了四个路由: /event_list /creat_event /delete_event/int:event_id /edit_event/int:event_id 创建app/views/event_view.py # event_view.py from flask import Blueprint from app.controller import event_controller # 导入 event_controller 模块 event_blueprint = Blueprint('event', __name__) # 将视图函数与蓝图关联 event_blueprint.route('/event_list')(event_controller.show_event) event_blueprint.route('/create_event', methods=['GET', 'POST'])(event_controller.create_event) event_blueprint.route('/delete_event/\u003cint:event_id\u003e', methods=['POST'])(event_controller.delete_event) event_blueprint.route('/edit_event/\u003cint:event_id\u003e', methods=['GET', 'POST'])(event_controller.edit_event) ","date":"2025-03-07","objectID":"/posts/20250307182650/:4:0","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（三）】项目组成-Web开发篇-日程逻辑的创建","uri":"/posts/20250307182650/"},{"categories":["项目文档"],"content":"创建控制器 明确了视图,现在只需要完成对Event表的CRUD即可，创建app/controller/event_controller.py ","date":"2025-03-07","objectID":"/posts/20250307182650/:5:0","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（三）】项目组成-Web开发篇-日程逻辑的创建","uri":"/posts/20250307182650/"},{"categories":["项目文档"],"content":"查询事件 使用flask-login插件管理用户,利用@login_required装饰器获取当前登录用户的id。创建一个动态生成事件的函数get_user_events按照用户设置的规则动态生成将要在前端显示的事件,这样可以够支持用户设置特点频率的事件而且能避免数据库的负担过大。编写一个逻辑检查过期的事件并同未过期的事件一并返回。 @login_required def show_event(): user_id = current_user.id # 获取当前登录用户的ID today_events, expired_events = get_user_events(user_id) return render_template('event_list.html', events=today_events, expired_events=expired_events) def get_user_events(user_id): \"\"\" 查询当前用户的所有事件，并根据事件的重复规则生成今天的事件列表和过期事件列表。 Args: user_id (int): 用户ID Returns: tuple: 包含今天的事件列表和过期事件列表的元组 \"\"\" # 查询当前用户的所有事件 events = Event.query.filter_by(user_id=user_id).all() today = datetime.now().date() # 获取当前日期 today_events = [] expired_events = [] for event in events: # 如果事件过期，将其添加到过期事件列表中 if event.end_date \u003c today: expired_events.append(event) continue # 如果事件不是重复事件，将其添加到今天事件列表中 if event.repeat == \"none\" and today \u003c= event.end_date: today_events.append(event) # 如果事件是重复事件，动态生成后将其添加到今天事件列表中 else: start_date = event.start_date end_date = event.end_date if event.repeat == \"daily\": current_date = start_date while current_date \u003c= end_date: if current_date \u003e= today: new_event = generate_repeat_event(event, current_date) today_events.append(new_event) break current_date += timedelta(days=1) elif event.repeat == \"weekly\": if end_date-today \u003c timedelta(days=7): expired_events.append(event) continue current_date = start_date while current_date \u003c= end_date: if current_date \u003e= today: last_week_event = generate_repeat_event(event, current_date) today_events.append(last_week_event) break current_date += timedelta(weeks=1) elif event.repeat == \"monthly\": if end_date-today \u003c timedelta(days=30): expired_events.append(event) continue current_date = start_date while current_date \u003c= end_date: if current_date \u003e= today: last_month_event = generate_repeat_event(event, current_date) today_events.append(last_month_event) break current_date += timedelta(days=30) return today_events, expired_events # 创建一个函数，用于生成重复事件 def generate_repeat_event(event, current_date): new_event = Event( user_id=event.user_id, title=event.title, start_date=current_date, end_date=current_date, event_time=event.event_time, location=event.location, description=event.description, repeat=event.repeat, reminder_type=event.reminder_type, reminder_time=event.reminder_time ) new_event.id = event.id # 设置新事件的ID为原事件的ID return new_event``` ### 创建事件 在用户提交表单之前,使用表单验证能够有效规范数据库在forms.py上加入对Event的表单验证: ```python # forms.py from flask_wtf import FlaskForm from wtforms import StringField, PasswordField, validators, SubmitField, ValidationError, DateField, TimeField class RegisterForm(FlaskForm): name = StringField('用户名', [validators.DataRequired(\"用户名不能为空\")]) email = StringField('邮箱', [validators.DataRequired(\"邮箱不能为空\"), validators.Email(\"无效的邮箱地址\")]) phone = StringField('电话') password = PasswordField('密码', [ validators.DataRequired(\"密码不能为空\"), validators.Length(min=8, message=\"密码长度至少 8 个字符\") ]) confirm_password = PasswordField('确认密码', [ validators.DataRequired(\"请再次输入密码\"), validators.EqualTo('password', message='两次密码不匹配') ]) class LoginForm(FlaskForm): email = StringField('邮箱', [validators.DataRequired(\"邮箱不能为空\"), validators.Email(\"无效的邮箱地址\")]) password = PasswordField('密码', [validators.DataRequired(\"密码不能为空\")]) remember = StringField('记住我') class EventForm(FlaskForm): title = StringField('标题', validators=[validators.DataRequired(), validators.Length(max=255)]) start_date = DateField('开始日期', format='%Y-%m-%d', validators=[validators.DataRequired()]) event_time = TimeField('事件时间', format='%H:%M') end_date = DateField('结束时间', format='%Y-%m-%d') location = StringField('地点', validators=[validators.Length(max=255)]) description = StringField('描述', validators=[validators.Length(max=255)]) repeat = StringField('重复') reminder_type = StringField('提醒类型', validators=[validators.DataRequired()]) reminder_time = StringField('提醒时间') submit = SubmitField('Submit') # 添加这一行来定义 submit 字段 # 如果结束时间小于或等于开始时间，则引发验证错误。 def validate_end_time(self, field): if field.data \u003c= self.start_date.data: raise Valida","date":"2025-03-07","objectID":"/posts/20250307182650/:5:1","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（三）】项目组成-Web开发篇-日程逻辑的创建","uri":"/posts/20250307182650/"},{"categories":["项目文档"],"content":"删除事件 @login_required def delete_event(event_id): # 查询要删除的事件 event = Event.query.get(event_id) # 检查事件是否存在并属于当前用户 if event and event.user_id == current_user.id: db.session.delete(event) db.session.commit() flash('事件删除成功', 'success') else: flash('无法删除事件', 'error') return redirect(url_for('event.show_event')) ","date":"2025-03-07","objectID":"/posts/20250307182650/:5:2","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（三）】项目组成-Web开发篇-日程逻辑的创建","uri":"/posts/20250307182650/"},{"categories":["项目文档"],"content":"编辑事件 @login_required def edit_event(event_id): # 查询要编辑的事件 event = Event.query.get(event_id) # 检查事件是否存在并属于当前用户 if not event or event.user_id != current_user.id: flash('无法编辑事件', 'error') return redirect(url_for('event.show_event')) form = EventForm(obj=event) # 使用事件对象填充表单 if form.validate_on_submit(): # 更新事件信息 event.title = form.title.data event.event_time = form.event_time.data event.start_date = form.start_date.data event.end_date = form.end_date.data event.location = form.location.data event.description = form.description.data event.repeat = form.repeat.data # 从表单获取重复类型 event.reminder_type = form.reminder_type.data event.reminder_time = form.reminder_time.data db.session.commit() flash('事件更新成功', 'success') return redirect(url_for('event.show_event')) return render_template('edit_event.html', form=form) ","date":"2025-03-07","objectID":"/posts/20250307182650/:5:3","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（三）】项目组成-Web开发篇-日程逻辑的创建","uri":"/posts/20250307182650/"},{"categories":["项目文档"],"content":"前端页面 完成了后端的逻辑,接下来只需要通过jinja2语法创建模板即可。由于html代码可读性差，以下使用项目的初始demo来说明。demo中只有jinja2接口，基本上没有任何样式，但是代码可读性强。 ","date":"2025-03-07","objectID":"/posts/20250307182650/:6:0","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（三）】项目组成-Web开发篇-日程逻辑的创建","uri":"/posts/20250307182650/"},{"categories":["项目文档"],"content":"构建 /event/event_list对应的页面 创建模板app/templates/event_list.html \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003ctitle\u003e事件列表\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003e事件列表\u003c/h1\u003e \u003cul\u003e \u003c!--显示待执行的事件--\u003e {% for event in events %} \u003cli\u003e \u003ch2\u003e{{ event.title }}\u003c/h2\u003e \u003cp\u003e\u003cstrong\u003e日期：\u003c/strong\u003e{{ event.start_date }} - {{ event.end_date }}\u003c/p\u003e \u003cp\u003e\u003cstrong\u003e时间：\u003c/strong\u003e{{ event.event_time }}\u003c/p\u003e \u003cp\u003e\u003cstrong\u003e地点：\u003c/strong\u003e{{ event.location }}\u003c/p\u003e \u003cp\u003e\u003cstrong\u003e描述：\u003c/strong\u003e{{ event.description }}\u003c/p\u003e \u003cp\u003e\u003cstrong\u003e重复：\u003c/strong\u003e{{ event.repeat }}\u003c/p\u003e \u003cp\u003e\u003cstrong\u003e提醒类型:\u003c/strong\u003e{{ event.reminder_type }}\u003c/p\u003e {% with days=event.reminder_time // (24 * 60), hours=(event.reminder_time % (24 * 60)) // 60, minutes=(event.reminder_time % 60) %} \u003cp\u003e\u003cstrong\u003e提醒时间:\u003c/strong\u003e{{ days }} 天 {{ hours }} 小时 {{ minutes }} 分钟\u003c/p\u003e {% endwith %} \u003ca href=\"{{ url_for('event.edit_event', event_id=event.id) }}\"\u003e编辑\u003c/a\u003e \u003cform method=\"post\" action=\"{{ url_for('event.delete_event', event_id=event.id) }}\"\u003e \u003cinput type=\"submit\" value=\"删除\"\u003e \u003c/form\u003e \u003c/li\u003e {% endfor %} \u003c!--显示过期的事件--\u003e {% for event in expired_events %} \u003cli style=\"color: gray\"\u003e \u003ch2\u003e{{ event.title }}\u003c/h2\u003e \u003cp style=\"color: red\"\u003e\u003cstrong\u003e日期：\u003c/strong\u003e{{ event.start_date }} - {{ event.end_date }}\u003c/p\u003e \u003cp\u003e\u003cstrong\u003e时间：\u003c/strong\u003e{{ event.event_time }}\u003c/p\u003e \u003cp\u003e\u003cstrong\u003e地点：\u003c/strong\u003e{{ event.location }}\u003c/p\u003e \u003cp\u003e\u003cstrong\u003e描述：\u003c/strong\u003e{{ event.description }}\u003c/p\u003e \u003cp\u003e\u003cstrong\u003e重复：\u003c/strong\u003e{{ event.repeat }}\u003c/p\u003e \u003cp\u003e\u003cstrong\u003e提醒类型:\u003c/strong\u003e{{ event.reminder_type }}\u003c/p\u003e {% with days=event.reminder_time // (24 * 60), hours=(event.reminder_time % (24 * 60)) // 60, minutes=(event.reminder_time % 60) %} \u003cp\u003e\u003cstrong\u003e提醒时间:\u003c/strong\u003e{{ days }} 天 {{ hours }} 小时 {{ minutes }} 分钟\u003c/p\u003e {% endwith %} \u003ca href=\"{{ url_for('event.edit_event', event_id=event.id) }}\"\u003e编辑\u003c/a\u003e \u003cform method=\"post\" action=\"{{ url_for('event.delete_event', event_id=event.id) }}\"\u003e \u003cinput type=\"submit\" value=\"删除\"\u003e \u003c/form\u003e \u003c/li\u003e {% endfor %} \u003c/ul\u003e \u003ca href=\"{{ url_for('event.create_event') }}\"\u003e创建事件\u003c/a\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2025-03-07","objectID":"/posts/20250307182650/:7:0","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（三）】项目组成-Web开发篇-日程逻辑的创建","uri":"/posts/20250307182650/"},{"categories":["项目文档"],"content":"构建 /event/creat_event 对应的页面 创建模板 app/templates/create_event.html，注意需要在提交表单前加上{{ form.hidden_tag() }}保证通过表单验证 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003ctitle\u003eCreate Event\u003c/title\u003e \u003clink rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/http_cdn.jsdelivr.net_npm_flatpickr_dist_flatpickr.css') }}\"\u003e \u003cscript src=\"{{ url_for('static', filename='js/http_cdn.jsdelivr.net_npm_flatpickr.js') }}\"\u003e\u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eCreate Event\u003c/h1\u003e \u003cform onsubmit=\"combineAndSubmit()\" method=\"POST\"\u003e {{ form.hidden_tag() }} \u003cdiv\u003e {{ form.title.label(class=\"form-label\") }} {{ form.title(class=\"form-control\") }} {% for error in form.title.errors %} \u003cspan style=\"color: red;\"\u003e{{ error }}\u003c/span\u003e {% endfor %} \u003c/div\u003e \u003cdiv\u003e {{ form.start_date.label(class=\"form-label\") }} {{ form.start_date(class=\"form-control flatpickr\",id=\"start_date\") }} {% for error in form.start_date.errors %} \u003cspan style=\"color: red;\"\u003e{{ error }}\u003c/span\u003e {% endfor %} \u003c/div\u003e \u003cdiv\u003e {{ form.event_time.label(class=\"form-label\") }} {{ form.event_time(class=\"form-control flatpickr\",id=\"event_time\") }} {% for error in form.event_time.errors %} \u003cspan style=\"color: red;\"\u003e{{ error }}\u003c/span\u003e {% endfor %} \u003c/div\u003e \u003cdiv\u003e {{ form.end_date.label(class=\"form-label\") }} {{ form.end_date(class=\"form-control, flatpickr\",id=\"end_date\") }} {% for error in form.end_date.errors %} \u003cspan style=\"color: red;\"\u003e{{ error }}\u003c/span\u003e {% endfor %} \u003c/div\u003e \u003cdiv\u003e {{ form.location.label(class=\"form-label\") }} {{ form.location(class=\"form-control\") }} {% for error in form.location.errors %} \u003cspan style=\"color: red;\"\u003e{{ error }}\u003c/span\u003e {% endfor %} \u003c/div\u003e \u003cdiv\u003e {{ form.description.label(class=\"form-label\") }} {{ form.description(class=\"form-control\") }} {% for error in form.description.errors %} \u003cspan style=\"color: red;\"\u003e{{ error }}\u003c/span\u003e {% endfor %} \u003c/div\u003e \u003cdiv\u003e \u003clabel for=\"repeatSelect\"\u003e{{ form.repeat.label(class=\"form-label\") }}\u003c/label\u003e \u003cselect name=\"repeat\" id=\"repeatSelect\" class=\"form-control\"\u003e \u003coption value=\"none\"\u003e无\u003c/option\u003e \u003coption value=\"daily\"\u003e每天\u003c/option\u003e \u003coption value=\"weekly\"\u003e每周\u003c/option\u003e \u003coption value=\"month\"\u003e每月\u003c/option\u003e \u003c/select\u003e {% for error in form.repeat.errors %} \u003cspan style=\"color: red;\"\u003e{{ error }}\u003c/span\u003e {% endfor %} \u003c/div\u003e \u003cdiv\u003e \u003clabel for=\"reminder_type\"\u003e{{ form.reminder_type.label(class=\"form-label\") }}\u003c/label\u003e \u003cselect name=\"reminder_type\" id=\"reminder_type\" class=\"form-control\"\u003e \u003coption value=\"none\"\u003e无\u003c/option\u003e \u003coption value=\"email\"\u003e邮箱\u003c/option\u003e \u003coption value=\"phone\"\u003e手机\u003c/option\u003e \u003coption value=\"pepper\"\u003e机器人\u003c/option\u003e \u003c/select\u003e {% for error in form.reminder_type.errors %} \u003cspan style=\"color: red;\"\u003e{{ error }}\u003c/span\u003e {% endfor %} \u003c/div\u003e \u003cdiv\u003e {{ form.reminder_time.label(class=\"form-label\") }} \u003cinput type=\"button\" value=\"设置提醒\" onclick=\"showReminderOptions()\"\u003e {% for error in form.reminder_time.errors %} \u003cspan style=\"color: red;\"\u003e{{ error }}\u003c/span\u003e {% endfor %} \u003c/div\u003e \u003cdiv id=\"reminderOptions\" style=\"display: none;\"\u003e \u003clabel for=\"daysInput\"\u003e天数：\u003c/label\u003e \u003cinput type=\"number\" id=\"daysInput\" name=\"daysInput\" min=\"0\"\u003e \u003cbr\u003e \u003clabel for=\"hoursInput\"\u003e小时：\u003c/label\u003e \u003cselect id=\"hoursInput\" name=\"hoursInput\"\u003e \u003c!-- 使用 JavaScript 动态生成选项 --\u003e \u003c/select\u003e \u003cbr\u003e \u003clabel for=\"minutesInput\"\u003e分钟：\u003c/label\u003e \u003cselect id=\"minutesInput\" name=\"minutesInput\"\u003e \u003c!-- 使用 JavaScript 动态生成选项 --\u003e \u003c/select\u003e \u003c/div\u003e \u003cdiv\u003e \u003c!-- 隐藏的input元素用于存储提醒时间 --\u003e \u003cinput type=\"hidden\" name=\"reminder_time\" id=\"reminder_time\" value=\"\"\u003e \u003c/div\u003e \u003cdiv\u003e {{ form.submit()}} \u003c/div\u003e \u003c/form\u003e \u003cscript\u003e flatpickr('#start_date', { enableTime: false, dateFormat: \"Y-m-d\", }); flatpickr('#event_time', { enableTime: true, noCalendar: true, // 禁用日期选择 time_24hr: true, // 使用24小时制 dateFormat: \"H:i\", }); flatpickr('#end_date', { enableTime: false, dateFormat: \"Y-m-d\", }); \u003c/script\u003e \u003cscript\u003e function populateOptions(element, max) { for (let i = 0; i \u003c= max; i++) { const option = document.createElement('option'); option.value = i; option.text = i; element.appendChild(option); } } // 动态生成小时和分钟的选项 populateOptions(document.getElementById('hoursInput'), 24); populateOptions(document.getElement","date":"2025-03-07","objectID":"/posts/20250307182650/:8:0","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（三）】项目组成-Web开发篇-日程逻辑的创建","uri":"/posts/20250307182650/"},{"categories":["项目文档"],"content":"构建 /event/edit_event/ 对应的页面 创建模板 app/templates/edit_event.html,/event/delete_event/ 路由没有页面,而是通过按钮来触发并删除事件 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003ctitle\u003eCreate Event\u003c/title\u003e \u003clink rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/http_cdn.jsdelivr.net_npm_flatpickr_dist_flatpickr.css') }}\"\u003e \u003cscript src=\"{{ url_for('static', filename='js/http_cdn.jsdelivr.net_npm_flatpickr.js') }}\"\u003e\u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eCreate Event\u003c/h1\u003e \u003cform onsubmit=\"combineAndSubmit()\" method=\"POST\"\u003e {{ form.hidden_tag() }}\u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003ctitle\u003eEdit Event\u003c/title\u003e \u003clink rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/http_cdn.jsdelivr.net_npm_flatpickr_dist_flatpickr.css') }}\"\u003e \u003cscript src=\"{{ url_for('static', filename='js/http_cdn.jsdelivr.net_npm_flatpickr.js') }}\"\u003e\u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eEdit Event\u003c/h1\u003e \u003cform onsubmit=\"combineAndSubmit()\" method=\"POST\"\u003e {{ form.hidden_tag() }} \u003cdiv\u003e {{ form.title.label(class=\"form-label\") }} {{ form.title(class=\"form-control\") }} {% for error in form.title.errors %} \u003cspan style=\"color: red;\"\u003e{{ error }}\u003c/span\u003e {% endfor %} \u003c/div\u003e \u003cdiv\u003e {{ form.start_date.label(class=\"form-label\") }} {{ form.start_date(class=\"form-control flatpickr\",id=\"start_date\") }} {% for error in form.start_date.errors %} \u003cspan style=\"color: red;\"\u003e{{ error }}\u003c/span\u003e {% endfor %} \u003c/div\u003e \u003cdiv\u003e {{ form.event_time.label(class=\"form-label\") }} {{ form.event_time(class=\"form-control flatpickr\",id=\"event_time\") }} {% for error in form.event_time.errors %} \u003cspan style=\"color: red;\"\u003e{{ error }}\u003c/span\u003e {% endfor %} \u003c/div\u003e \u003cdiv\u003e {{ form.end_date.label(class=\"form-label\") }} {{ form.end_date(class=\"form-control, flatpickr\",id=\"end_date\") }} {% for error in form.end_date.errors %} \u003cspan style=\"color: red;\"\u003e{{ error }}\u003c/span\u003e {% endfor %} \u003c/div\u003e \u003cdiv\u003e {{ form.location.label(class=\"form-label\") }} {{ form.location(class=\"form-control\") }} {% for error in form.location.errors %} \u003cspan style=\"color: red;\"\u003e{{ error }}\u003c/span\u003e {% endfor %} \u003c/div\u003e \u003cdiv\u003e {{ form.description.label(class=\"form-label\") }} {{ form.description(class=\"form-control\") }} {% for error in form.description.errors %} \u003cspan style=\"color: red;\"\u003e{{ error }}\u003c/span\u003e {% endfor %} \u003c/div\u003e \u003cdiv\u003e \u003clabel for=\"repeatSelect\"\u003e{{ form.repeat.label(class=\"form-label\") }}\u003c/label\u003e \u003cselect name=\"repeat\" id=\"repeatSelect\" class=\"form-control\"\u003e \u003coption value=\"none\" {% if form.repeat.data == 'none' %}selected{% endif %}\u003e无\u003c/option\u003e \u003coption value=\"daily\" {% if form.repeat.data == 'daily'%}selected{% endif %}\u003e每天\u003c/option\u003e \u003coption value=\"weekly\" {% if form.repeat.data == 'weekly' %}selected{% endif %}\u003e每周\u003c/option\u003e \u003coption value=\"month\" {% if form.repeat.data == 'month' %}selected{% endif %}\u003e每月\u003c/option\u003e \u003c/select\u003e {% for error in form.repeat.errors %} \u003cspan style=\"color: red;\"\u003e{{ error }}\u003c/span\u003e {% endfor %} \u003c/div\u003e \u003cdiv\u003e \u003clabel for=\"reminder_type\"\u003e{{ form.reminder_type.label(class=\"form-label\") }}\u003c/label\u003e \u003cselect name=\"reminder_type\" id=\"reminder_type\" class=\"form-control\"\u003e \u003coption value=\"none\" {% if form.reminder_type.data == 'none' %}selected{% endif %}\u003e无\u003c/option\u003e \u003coption value=\"email\" {% if form.reminder_type.data == 'email' %}selected{% endif %}\u003e邮箱\u003c/option\u003e \u003coption value=\"phone\" {% if form.reminder_type.data == 'phone' %}selected{% endif %}\u003e手机\u003c/option\u003e \u003coption value=\"pepper\" {% if form.reminder_type.data == 'pepper' %}selected{% endif %}\u003e机器人\u003c/option\u003e \u003c/select\u003e {% for error in form.reminder_type.errors %} \u003cspan style=\"color: red;\"\u003e{{ error }}\u003c/span\u003e {% endfor %} \u003c/div\u003e \u003cdiv\u003e {{ form.reminder_time.label(class=\"form-label\") }} {{ form.reminder_time(class=\"form-control\",style=\"display: none;\") }} \u003cinput type=\"button\" value=\"设置提醒\" onclick=\"showReminderOptions()\"\u003e {% for error in form.reminder_time.errors %} \u003cspan style=\"color: red;\"\u003e{{ error }}\u003c/span\u003e {% endfor %} \u003c/div\u003e \u003cdiv id=\"reminderOptions\" style=\"display: none;\"\u003e \u003clabel for=\"daysInput\"\u003e天数：\u003c/label\u003e \u003cinput type=\"number\" id=\"daysInput\" name=\"daysInput\" min=\"0\"\u003e \u003cbr\u003e \u003clabel for=\"hoursInput\"\u003e小时：\u003c/label\u003e \u003cselect id=\"hoursInpu","date":"2025-03-07","objectID":"/posts/20250307182650/:9:0","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（三）】项目组成-Web开发篇-日程逻辑的创建","uri":"/posts/20250307182650/"},{"categories":["项目文档"],"content":"效果呈现 注：以下效果图的html代码并非以上的代码，而是通过优化后的效果 ","date":"2025-03-07","objectID":"/posts/20250307182650/:10:0","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（三）】项目组成-Web开发篇-日程逻辑的创建","uri":"/posts/20250307182650/"},{"categories":["项目文档"],"content":"/event/event_list ","date":"2025-03-07","objectID":"/posts/20250307182650/:11:0","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（三）】项目组成-Web开发篇-日程逻辑的创建","uri":"/posts/20250307182650/"},{"categories":["项目文档"],"content":"/event/creat_event ","date":"2025-03-07","objectID":"/posts/20250307182650/:12:0","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（三）】项目组成-Web开发篇-日程逻辑的创建","uri":"/posts/20250307182650/"},{"categories":["项目文档"],"content":"/event/edit_event/ ","date":"2025-03-07","objectID":"/posts/20250307182650/:13:0","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（三）】项目组成-Web开发篇-日程逻辑的创建","uri":"/posts/20250307182650/"},{"categories":["项目文档"],"content":" Web模块的大致结构是基于MVC架构的flask+jinja2+mysql的前后端不分离的结构 ","date":"2025-03-07","objectID":"/posts/20250307182535/:0:0","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（二)】项目组成-Web开发篇：后端","uri":"/posts/20250307182535/"},{"categories":["项目文档"],"content":"项目概述 Web模块的大致结构是基于MVC架构的flask+jinja2+mysql的前后端不分离的结构，大致结构已经在上篇中介绍了，这里不做赘述了。由于项目需求比较简单而且需求特殊，后端选择自己构建导致有些用法并不完全满足falsk的开发规范。前端没有使用框架，而是使用开源项目二次开发，代码中有许多冗余。 │ README.md │ .env //环境变量 │ app.log //运行日志 │ runserver.py //项目启动文件 │ requirements.txt //项目依赖 ├─app │ │ config.py //配置文件,数据库连接(需要在环境变量中加入此路径) │ │ forms.py //验证表单程序 │ │ __init__.py //模块初始化文件，Flask 程序对象的创建须在 __init__.py 文件里完成 │ │ wsgi.py //wsgi服务启动 │ │ │ ├─controller //MVC中的控制器(C) │ │ event_controller.py //事件控制器 │ │ api_controller.py //api控制器 │ │ user_controller.py //用户控制器 │ │ reminder_controller.py //提醒控制器 │ │ │ ├─model //MVC中的模型,数据库中的表(M) │ │ Event.py //事件表 │ │ User.py //用户表 │ │ EmailHistory //邮件历史记录 │ │ │ ├─views //MVC中的视图(V) │ │ admin_view.py //管理员 │ │ event_view.py //事件 │ │ index_view.py //主页 │ │ user_view.py //用户 │ │ album_view.py //相册 │ │ reminder_view.py//提醒 │ │ │ ├─static //静态资源，css，js等 │ ├─templates //视图映射的页面 │ │ index.html //主页 │ │ create_event.html //创建事件 │ │ edit_event.html //编辑事件 │ │ event_list.html //查看事件 │ │ login.html //登录 │ │ register.html //注册 │ │ calendar.html //日历 │ │ profile.html //个人信息 │ │ album.html //相册 │ │ email_history.html //邮件页面 │ │ email_template.html //邮件模板 │ │ about.html //使用教程页面 ","date":"2025-03-07","objectID":"/posts/20250307182535/:1:0","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（二)】项目组成-Web开发篇：后端","uri":"/posts/20250307182535/"},{"categories":["项目文档"],"content":"模型-数据库的构建 项目开始项目构建数据库,也是MVC中的模型。数据库的搭建使用了flask-SQLAlchemy的orm框架，使用flask-migrate进行数据库的迁移。 User.py: from app import db from werkzeug.security import generate_password_hash, check_password_hash from flask_login import UserMixin class User(db.Model, UserMixin): __tablename__ = 'users' id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(255), nullable=False) email = db.Column(db.String(255), nullable=False, unique=True) phone = db.Column(db.String(255), nullable=False) password_hash = db.Column(db.String(255), nullable=False) # 添加密码哈希字段 is_admin = db.Column(db.Boolean, default=False, nullable=False) # 新增 is_admin 字段 event = db.relationship('Event', backref='user', lazy='dynamic') email_history = db.relationship('EmailHistory', backref='user', lazy='dynamic') def __init__(self, name, email, phone, password, is_admin=False): self.name = name self.email = email self.phone = phone self.set_password(password) # 在初始化时设置密码哈希值 self.is_admin = is_admin # 设置用户是否是管理员 def __repr__(self): return '\u003cUser %r\u003e' % self.name # 添加密码哈希相关的方法 def set_password(self, password): self.password_hash = generate_password_hash(password) def check_password(self, password): return check_password_hash(self.password_hash, password) # 实现 is_active 方法 def is_active(self): return True # 返回 True 表示用户是活动的，可以登录 Event.py: from app import db from app.model.User import User from sqlalchemy.ext.hybrid import hybrid_property class Event(db.Model): __tablename__ = 'events' id = db.Column(db.Integer, primary_key=True) user_id = db.Column(db.Integer, db.ForeignKey(User.id, ondelete='CASCADE'), nullable=False) title = db.Column(db.String(255), nullable=False) start_date = db.Column(db.Date, nullable=False) event_time = db.Column(db.Time) end_date = db.Column(db.Date) location = db.Column(db.String(255)) description = db.Column(db.String(255)) repeat = db.Column(db.String(255), nullable=False, default=\"none\") # Text field for custom repeat types reminder_type = db.Column(db.String(255), nullable=False, default=\"none\") reminder_time = db.Column(db.Float, nullable=True, default=0) @hybrid_property def duration(self): return self.end_date - self.start_date def __init__(self, user_id, title, start_date, event_time, end_date, location, description, reminder_time, repeat, reminder_type): self.user_id = user_id self.title = title self.start_date = start_date self.event_time = event_time self.end_date = end_date self.location = location self.description = description self.repeat = repeat self.reminder_type = reminder_type self.reminder_time = reminder_time def __repr__(self): return '\u003cEvent %r\u003e' % self.title EmailHistory.py: # encoding:utf-8 # encoding:utf-8 from datetime import datetime from app import db from app.model.User import User class EmailHistory(db.Model): id = db.Column(db.Integer, primary_key=True) user_id = db.Column(db.Integer, db.ForeignKey(User.id, ondelete='CASCADE'), nullable=False) title = db.Column(db.String(255), nullable=False) content = db.Column(db.Text, nullable=False) recipients = db.Column(db.String(255), nullable=False) sent_at = db.Column(db.DateTime, default=datetime.utcnow, nullable=False) def __init__(self, user_id, title, content, recipients): self.user_id = user_id self.title = title self.content = content self.recipients = recipients 创建好SQLAlchemy后使用flask-Migrate命令初始化数据库，使用数据库迁移可以很好的管理数据库结构的改变而且不会影响数据。 ","date":"2025-03-07","objectID":"/posts/20250307182535/:2:0","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（二)】项目组成-Web开发篇：后端","uri":"/posts/20250307182535/"},{"categories":["项目文档"],"content":"数据库迁移 创建迁移存储库： flask db init 这会将迁移文件夹添加到应用程序中。此时，你可以发现项目目录多了一个 migrations 的文件夹，下边的 versions 目录下的文件就是生成的数据库迁移文件！ 然后，运行以下命令生成迁移 flask db migrate -m \"initial migration\" 做完这两步就完成了第一次的初始迁移操作，我们可以看数据库已经有了我们创建的模型字段！之后，每次在新增和修改完模型数据之后，只需要执行以下两个命令即可 flask db migrate -m \"description of changes\" flask db upgrade 这些步骤将允许你使用flask_migrate管理数据库模型的变化。请确保按照这些步骤在你的Flask应用中设置并使用flask_migrate，以便维护数据库模型的一致性。 使用Navicate查看数据模型： ","date":"2025-03-07","objectID":"/posts/20250307182535/:2:1","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（二)】项目组成-Web开发篇：后端","uri":"/posts/20250307182535/"},{"categories":["项目文档"],"content":"以登录为例创建Web App ","date":"2025-03-07","objectID":"/posts/20250307182535/:3:0","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（二)】项目组成-Web开发篇：后端","uri":"/posts/20250307182535/"},{"categories":["项目文档"],"content":"控制器 用户管理使用了flask-login管理用户逻辑 我们首先编写注册和登录逻辑，创建app/controller/user_controller.py 。 # encoding:utf-8 from flask import flash, redirect, url_for, render_template, make_response from flask_login import login_user, login_required, logout_user, current_user from app.forms import RegisterForm, LoginForm from app.model.User import User from app import db, login_manager def register(): \"\"\" 注册新用户。 该函数处理新用户的注册过程。它验证用户提交的表单数据， 检查用户是否已存在，在数据库中创建新用户，并将用户重定向到登录页面 注册成功后。 Returns: 如果表单数据有效并且用户注册成功，则将用户重定向到登录页面。 否则，它会呈现带有注册表单的 register.html 模板。 \"\"\" form = RegisterForm() if form.validate_on_submit(): # 获取用户提交的数据 name = form.name.data email = form.email.data phone = form.phone.data password = form.password.data # 检查用户是否已存在 existing_user = User.query.filter_by(email=email).first() if existing_user: flash('该邮箱地址已被注册', 'error') return redirect(url_for('user.register')) # 创建新用户 new_user = User(name=name, email=email, phone=phone, password=password) db.session.add(new_user) db.session.commit() flash('注册成功，请登录', 'success') return redirect(url_for('user.login')) return render_template('register.html', form=form) def login(): \"\"\" 用户登录函数 如果用户已登录，则重定向到受保护的页面。 如果用户提交了有效的登录表单，则验证用户凭据并将用户标记为已登录。 如果用户验证失败，则显示错误消息。 return: 渲染登录页面或重定向到受保护的页面 \"\"\" if current_user.is_authenticated: # 如果用户已登录，重定向到受保护的页面 return redirect(url_for('event.show_event')) form = LoginForm() if form.validate_on_submit(): email = form.email.data # 修改为使用邮箱作为登录凭据 password = form.password.data user = User.query.filter_by(email=email).first() if user and user.check_password(password): # 用户验证成功，将用户标记为已登录 # 可以使用 Flask-Login 或自己的会话管理逻辑来处理登录状态 login_user(user, remember=form.remember) # return redirect(url_for('event.show_event')) # 跳转到用户仪表板或其他受保护的页面 # 设置cookie response = make_response(redirect(url_for('event.show_event'))) response.set_cookie('user_id', str(user.id)) # 存储用户ID在cookie中 flash('登录成功', 'success') return response else: flash('登录失败，请检查邮箱或密码', 'error') return render_template('login.html', form=form) @login_required def profile(): \"\"\" 用户个人信息页面 \"\"\" name = current_user.name email = current_user.email phone = current_user.phone return render_template('profile.html', name=name, email=email, phone=phone) @login_required def logout(): logout_user() # 使用 Flask-Login 注销用户 flash('成功注销', 'success') return redirect(url_for('user.login')) @login_manager.user_loader def load_user(user_id): # 使用用户 ID 查询用户对象 return User.query.get(int(user_id)) 创建表单验证: # forms.py from flask_wtf import FlaskForm from wtforms import StringField, PasswordField, validators, SubmitField, ValidationError, DateField, TimeField class RegisterForm(FlaskForm): name = StringField('用户名', [validators.DataRequired(\"用户名不能为空\")]) email = StringField('邮箱', [validators.DataRequired(\"邮箱不能为空\"), validators.Email(\"无效的邮箱地址\")]) phone = StringField('电话') password = PasswordField('密码', [ validators.DataRequired(\"密码不能为空\"), validators.Length(min=8, message=\"密码长度至少 8 个字符\") ]) confirm_password = PasswordField('确认密码', [ validators.DataRequired(\"请再次输入密码\"), validators.EqualTo('password', message='两次密码不匹配') ]) class LoginForm(FlaskForm): email = StringField('邮箱', [validators.DataRequired(\"邮箱不能为空\"), validators.Email(\"无效的邮箱地址\")]) password = PasswordField('密码', [validators.DataRequired(\"密码不能为空\")]) remember = StringField('记住我') ","date":"2025-03-07","objectID":"/posts/20250307182535/:3:1","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（二)】项目组成-Web开发篇：后端","uri":"/posts/20250307182535/"},{"categories":["项目文档"],"content":"视图 项目使用flask Blueprint(蓝图)来管理路由,创建app/views/user_view.py # user_view.py from flask import Blueprint from app.controller import user_controller user_blueprint = Blueprint('user', __name__) user_blueprint.route('/register', methods=['GET', 'POST'])(user_controller.register) user_blueprint.route('/login', methods=['GET', 'POST'])(user_controller.login) user_blueprint.route('/logout', methods=['GET'])(user_controller.logout) user_blueprint.route('/profile', methods=['GET', 'POST'])(user_controller.profile) ","date":"2025-03-07","objectID":"/posts/20250307182535/:3:2","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（二)】项目组成-Web开发篇：后端","uri":"/posts/20250307182535/"},{"categories":["项目文档"],"content":"将参数通过jinja2传递到前端 注册页面: \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"utf-8\"\u003e \u003ctitle\u003e注册\u003c/title\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"../static/css/register-login.css\"\u003e \u003clink rel=\"icon\" href=\"../static/images/robot.png\" type=\"image/x-icon\"/\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id=\"box\"\u003e\u003c/div\u003e \u003cdiv class=\"cent-box register-box\"\u003e \u003cdiv class=\"cent-box-header\"\u003e \u003ch1 class=\"main-title hide\"\u003ePepper机器人\u003c/h1\u003e \u003ch2 class=\"sub-title\"\u003e日程管理系统\u003c/h2\u003e \u003c/div\u003e \u003cdiv class=\"cont-main clearfix\"\u003e \u003cdiv class=\"index-tab\"\u003e \u003cdiv class=\"index-slide-nav\"\u003e \u003ca href=\"{{ url_for('user.login') }}\"\u003e登录\u003c/a\u003e \u003ca href=\"{{ url_for('user.register') }}\" class=\"active\"\u003e注册\u003c/a\u003e \u003cdiv class=\"slide-bar slide-bar1\"\u003e\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003cform method=\"POST\"\u003e {{ form.hidden_tag() }} \u003cdiv class=\"login form\"\u003e \u003cdiv class=\"group\"\u003e \u003cdiv class=\"group-ipt name\"\u003e \u003clabel for=\"name\"\u003e\u003c/label\u003e {% if form.name.data is not none %} \u003cinput type=\"text\" name=\"name\" id=\"name\" class=\"ipt\" value=\"{{ form.name.data }}\" placeholder=\"输入您的用户名\" required\u003e {% else %} \u003cinput type=\"text\" name=\"name\" id=\"name\" class=\"ipt\" placeholder=\"输入您的用户名\" required\u003e {% endif %} \u003c/div\u003e \u003cdiv class=\"group-ipt email\"\u003e \u003clabel for=\"email\"\u003e\u003c/label\u003e {% if form.email.data is not none %} \u003cinput type=\"email\" name=\"email\" id=\"email\" class=\"ipt\" value=\"{{ form.email.data }}\" placeholder=\"请输入您的邮箱\" required\u003e {% else %} \u003cinput type=\"email\" name=\"email\" id=\"email\" class=\"ipt\" placeholder=\"请输入您的邮箱\" required\u003e {% endif %} \u003c/div\u003e \u003cdiv class=\"group-ipt phone\"\u003e \u003clabel for=\"phone\"\u003e\u003c/label\u003e {% if form.phone.data is not none %} \u003cinput type=\"text\" name=\"phone\" id=\"phone\" class=\"ipt\" value=\"{{ form.phone.data }}\" placeholder=\"输入您的电话\" required\u003e {% else %} \u003cinput type=\"text\" name=\"phone\" id=\"phone\" class=\"ipt\" placeholder=\"输入您的电话\" required\u003e {% endif %} \u003c/div\u003e \u003cdiv class=\"group-ipt password\"\u003e \u003clabel for=\"password\"\u003e\u003c/label\u003e\u003cinput type=\"password\" name=\"password\" id=\"password\" class=\"ipt\" placeholder=\"输入密码\" required\u003e \u003c/div\u003e \u003cdiv class=\"group-ipt confirm_password\"\u003e \u003clabel for=\"confirm_password\"\u003e\u003c/label\u003e\u003cinput type=\"password\" name=\"confirm_password\" id=\"confirm_password\" class=\"ipt\" placeholder=\"确认密码\" required\u003e \u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"button\"\u003e \u003cbutton type=\"submit\" class=\"register-btn\" id=\"button\" value=\"注册\"\u003e注册\u003c/button\u003e \u003c/div\u003e \u003c/div\u003e \u003c/form\u003e \u003c/div\u003e \u003c/div\u003e \u003cscript src='../static/js/particles.js' type=\"text/javascript\"\u003e\u003c/script\u003e \u003cscript src='../static/js/background.js' type=\"text/javascript\"\u003e\u003c/script\u003e \u003cscript src='../static/js/jquery.min.js' type=\"text/javascript\"\u003e\u003c/script\u003e \u003cscript src='../static/js/layer/layer.js' type=\"text/javascript\"\u003e\u003c/script\u003e \u003cscript src='../static/js/index.js' type=\"text/javascript\"\u003e\u003c/script\u003e \u003c/body\u003e \u003c/html\u003e 效果图: 登录页面: \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"utf-8\"\u003e \u003ctitle\u003e登录\u003c/title\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"{{ url_for('static', filename='css/register-login.css') }}\"\u003e \u003clink rel=\"icon\" href=\"{{ url_for('static', filename='images/robot.png') }}\" type=\"image/x-icon\"/\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id=\"box\"\u003e\u003c/div\u003e \u003cdiv class=\"cent-box\"\u003e \u003cdiv class=\"cent-box-header\"\u003e \u003ch1 class=\"main-title hide\"\u003ePepper机器人\u003c/h1\u003e \u003ch2 class=\"sub-title\"\u003e日程管理系统\u003c/h2\u003e \u003c/div\u003e \u003cdiv class=\"cont-main clearfix\"\u003e \u003cdiv class=\"index-tab\"\u003e \u003cdiv class=\"index-slide-nav\"\u003e \u003ca href=\"{{ url_for('user.login') }}\" class=\"active\"\u003e登录\u003c/a\u003e \u003ca href=\"{{ url_for('user.register') }}\"\u003e注册\u003c/a\u003e \u003cdiv class=\"slide-bar\"\u003e\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003cform method=\"POST\"\u003e {{ form.hidden_tag() }} \u003cdiv class=\"login form\"\u003e \u003cdiv class=\"group\"\u003e \u003cdiv class=\"group-ipt email\"\u003e \u003clabel for=\"email\"\u003e\u003c/label\u003e {% if form.email.data is not none %} \u003cinput type=\"email\" name=\"email\" id=\"email\" class=\"ipt\" value=\"{{ form.email.data }}\" placeholder=\"输入您的邮箱\" required\u003e {% else %} \u003cinput type=\"email\" name=\"email\" id=\"email\" class=\"ipt\" placeholder=\"输入您的邮箱\" required\u003e {% endif %} \u003c/div\u003e \u003cdiv class=\"group-ipt password\"\u003e \u003clabel for=\"password\"\u003e\u003c/label\u003e\u003cinput type=\"password\" name=\"password\" id=\"password\" class=\"ipt\" placeholder=\"输入您的登录密码\" required\u003e \u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"button\"\u003e \u003cbutton type=\"submit\" class=\"lo","date":"2025-03-07","objectID":"/posts/20250307182535/:3:3","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（二)】项目组成-Web开发篇：后端","uri":"/posts/20250307182535/"},{"categories":["项目文档"],"content":"配置config.py # 调试模式是否开启 DEBUG = True # 是否追踪对象的修改。 SQLALCHEMY_TRACK_MODIFICATIONS = True # 查询时显示原始SQL语句 SQLALCHEMY_ECHO = False # session必须要设置key SECRET_KEY = 'c798ee1f5fd894f6e0ba9fc0d16b8b22' # mysql数据库连接信息 DATABASE = 'schedule' SQLALCHEMY_DATABASE_URI = \"mysql+pymysql://[user]:[password]@localhost/\" + DATABASE ","date":"2025-03-07","objectID":"/posts/20250307182535/:3:4","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（二)】项目组成-Web开发篇：后端","uri":"/posts/20250307182535/"},{"categories":["项目文档"],"content":"使用工厂函数初始化 app/_init_.py from flask import Flask from flask_sqlalchemy import SQLAlchemy from flask_login import LoginManager from flask_migrate import Migrate from flask_restful import Api from flask_admin import Admin from flask_mail import Mail from flask_uploads import configure_uploads import logging from logging.handlers import RotatingFileHandler from flask_apscheduler import APScheduler # 创建Flask应用实例 db = SQLAlchemy() # 数据库实例 login_manager = LoginManager() # 登录管理实例 migrate = Migrate() # 数据库迁移实例 def create_app() -\u003e Flask: \"\"\"创建Flask应用实例并进行初始化设置。 Returns: Flask: 初始化设置后的Flask应用实例。 \"\"\" app = Flask(__name__) app.config.from_object('app.config') app.config.from_envvar('FLASKR_CONFIGS') configure_logging(app) # 添加日志配置 initialize_extensions(app) # 初始化 register_blueprints(app) # 注册蓝图 return app def initialize_extensions(app: Flask) -\u003e None: \"\"\"初始化扩展，包括数据库、登录管理、数据库迁移、邮件和文件上传。 Args: app (Flask): Flask应用实例。 \"\"\" db.init_app(app) migrate.init_app(app, db) login_manager.init_app(app) login_manager.login_view = 'user.login' def register_blueprints(app: Flask) -\u003e None: \"\"\"注册蓝图，包括主页、用户、事件和提醒蓝图。 Args: app (Flask): Flask应用实例。 \"\"\" from app.views.user_view import user_blueprint app.register_blueprint(user_blueprint, url_prefix='/user') def configure_logging(app: Flask) -\u003e None: \"\"\"配置应用程序日志。 Args: app (Flask): Flask应用实例。 \"\"\" log_file_path = 'app.log' log_handler = RotatingFileHandler(log_file_path, maxBytes=10240, backupCount=10) log_handler.setFormatter(logging.Formatter( '%(asctime)s %(levelname)s: %(message)s ' '[in %(pathname)s:%(lineno)d]' )) log_handler.setLevel(logging.INFO) app.logger.addHandler(log_handler) ","date":"2025-03-07","objectID":"/posts/20250307182535/:3:5","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（二)】项目组成-Web开发篇：后端","uri":"/posts/20250307182535/"},{"categories":["项目文档"],"content":"运行项目 app/runserver.py from app import create_app if __name__ == '__main__': app = create_app() app.run(host='0.0.0.0', port=5000, debug=True) ","date":"2025-03-07","objectID":"/posts/20250307182535/:3:6","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（二)】项目组成-Web开发篇：后端","uri":"/posts/20250307182535/"},{"categories":["项目文档"],"content":" 基于软银的pepper机器人，使用可视化低代码SDK软件choregraphe和web开发工具链开发一个机器人管家。 ","date":"2025-03-07","objectID":"/posts/20250307182231/:0:0","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（一）】项目构建","uri":"/posts/20250307182231/"},{"categories":["项目文档"],"content":"项目概述 基于软银的pepper机器人，使用可视化低代码SDK软件choregraphe和web开发工具链开发一个机器人管家。考虑到的功能有提醒按时用药，健康疑难解答，康复训练教程，闹钟，跌倒检测功能(内置电话功能与邮件功能)，听歌，读报，跳舞……。 ","date":"2025-03-07","objectID":"/posts/20250307182231/:1:0","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（一）】项目构建","uri":"/posts/20250307182231/"},{"categories":["项目文档"],"content":"项目架构 目前考虑的的功能的实现主要分成两部分，一个是基于choregraphe的机器人模块的开发，一个是基于web开发的网站。将这两部分结合后构成一个机器人管家。 ","date":"2025-03-07","objectID":"/posts/20250307182231/:2:0","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（一）】项目构建","uri":"/posts/20250307182231/"},{"categories":["项目文档"],"content":"Choregraphe choregraph主要承担系统的主控并实现提醒、跳舞、交流等功能 choregraphe是一个低代码的Pepper SDK，内置很多可拖拽的功能盒子，能完成项目的绝大部分需求。其中还有python script盒子能实现一些简单的python脚本，可惜python的版本只有python 2.7，而且很多库没有内置，在是开发的一大困难之一。 第二大难点是代码的调试和程序的稳定性很差，低代码的坏处就是自由度太低，而且网上的教程太少，整个项目开发只需要一份官方文档，官方文档虽然很多地方不齐全但也是比较完整。官方文档 ","date":"2025-03-07","objectID":"/posts/20250307182231/:3:0","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（一）】项目构建","uri":"/posts/20250307182231/"},{"categories":["项目文档"],"content":"Web开发 Web模块主要承担日程的设置、信息的推送、用户管理等功能 web开发选用的技术栈为：flask+MySQL+jinja2的前后端不分离开发流程，页面使用原生js+html+css。没有使用前端框架并使用前后端不分离主要是机器人的平板内置的浏览器版本太低，无法兼容大部分的“重型”js框架，将页面资源在后端渲染或许是比较好的方法。工具链使用的是Pycharm+navicat+vscode，部署使用了nginx+gunicorn，部署服务器为阿里云的轻量应用服务器2核4G：Ubuntu。 ","date":"2025-03-07","objectID":"/posts/20250307182231/:4:0","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（一）】项目构建","uri":"/posts/20250307182231/"},{"categories":["项目文档"],"content":"后端： 后端使用了MVC架构，用蓝图管理路由，并且创建了一些api供机器人调用，机器人与服务器主要同这些api进行通讯。 数据库 数据库的搭建使用了MySQL+flask-SQLAlchemy的orm框架。数据库涉及到用户的的注册和登录、用户的的日程CRUD、用户邮件的历史的保存和删除。 ","date":"2025-03-07","objectID":"/posts/20250307182231/:4:1","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（一）】项目构建","uri":"/posts/20250307182231/"},{"categories":["项目文档"],"content":"前端: 前端是二次开发的原生js的页面 主页: 日程管理: 完整的项目代码参考GitHub: https://github.com/Lucawell/flaskSchedule-pepper-MVC ","date":"2025-03-07","objectID":"/posts/20250307182231/:4:2","tags":["flask","日程管理系统"],"title":"【Pepper机器人管家（一）】项目构建","uri":"/posts/20250307182231/"},{"categories":["项目文档"],"content":" V1.7 增加报告模块 ","date":"2025-03-06","objectID":"/posts/20250306224715/:0:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.7","uri":"/posts/20250306224715/"},{"categories":["项目文档"],"content":"Anomaly Detection App 文档 ","date":"2025-03-06","objectID":"/posts/20250306224715/:1:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.7","uri":"/posts/20250306224715/"},{"categories":["项目文档"],"content":"项目概述 Anomaly Detection App 是一个基于 Python 和 PyQt5 的桌面应用程序，利用深度学习模型（如 Wide ResNet50 和 SimpleNet）进行图像异常检测。它支持单张和批量图片处理，提供直观的用户界面，用户可以选择模型、调整异常阈值、查看检测结果、分析报告并管理检测历史。应用通过多线程、GPU 加速和动态内存管理优化了性能，适用于工业检测、质量控制或其他需要图像异常分析的场景。 ","date":"2025-03-06","objectID":"/posts/20250306224715/:2:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.7","uri":"/posts/20250306224715/"},{"categories":["项目文档"],"content":"示例图 主界面 单张检测 批量检测与报告 注：新版本增加了“Report”选项卡，显示统计和图表。 历史记录查看 ","date":"2025-03-06","objectID":"/posts/20250306224715/:2:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.7","uri":"/posts/20250306224715/"},{"categories":["项目文档"],"content":"主要功能 模型选择：通过“Select Model”菜单选择预定义模型（如“Metal Nut”或“Screw”），支持快捷键（如 Ctrl+1）。 单张检测：检测单张图片，显示结果和异常信息，支持拖放操作。 批量检测：处理文件夹中的多张图片，生成检测结果、缩略图和分析报告，支持拖放文件夹。 结果导航：通过缩略图点击切换批量检测结果，鼠标悬停显示详细信息。 报告生成：批量检测后生成统计报告（异常数量、得分分布等）和图表（直方图、箱线图），支持导出为 CSV 或 PDF。 历史记录：保存每次检测的报告，支持查看和重新加载历史结果。 动态阈值：通过左侧滑块实时调整异常检测阈值（默认范围 0.0-2.0，默认值 1.2）。 性能优化：支持动态批次大小、GPU 加速、多线程预加载和磁盘缓存，减少内存占用和处理时间。 日志记录：可折叠日志区显示操作和错误信息，保存至文件。 拖放支持：支持拖放图片或文件夹触发检测。 ","date":"2025-03-06","objectID":"/posts/20250306224715/:2:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.7","uri":"/posts/20250306224715/"},{"categories":["项目文档"],"content":"技术栈 编程语言：Python 3.8+ GUI 框架：PyQt5 深度学习：PyTorch, torchvision 图像处理：Pillow, NumPy, Matplotlib 数据分析：pandas, NumPy 报告生成：reportlab（PDF 导出） 其他：tqdm（进度条）、logging（日志）、ruamel.yaml（配置文件）、concurrent.futures（多线程） ","date":"2025-03-06","objectID":"/posts/20250306224715/:2:3","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.7","uri":"/posts/20250306224715/"},{"categories":["项目文档"],"content":"安装与运行 ","date":"2025-03-06","objectID":"/posts/20250306224715/:3:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.7","uri":"/posts/20250306224715/"},{"categories":["项目文档"],"content":"环境要求 操作系统：Windows、macOS 或 Linux（跨平台支持） Python：3.8 或更高版本 硬件：支持 CUDA 的 GPU（可选，推荐至少 6 GiB 显存以处理批量检测） ","date":"2025-03-06","objectID":"/posts/20250306224715/:3:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.7","uri":"/posts/20250306224715/"},{"categories":["项目文档"],"content":"依赖安装 安装所需库： pip install PyQt5 torch torchvision pillow numpy matplotlib tqdm ruamel.yaml pandas reportlab torch：若需 GPU 支持，请根据硬件安装对应 CUDA 版本（参考 PyTorch 官网）。 simplenet：从 GitHub 克隆并置于项目目录，或根据需求修改 simplenet.py。 ","date":"2025-03-06","objectID":"/posts/20250306224715/:3:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.7","uri":"/posts/20250306224715/"},{"categories":["项目文档"],"content":"项目文件 下载项目代码并确保以下结构完整： anomaly_detection_app/ ├── main.py ├── gui.py ├── image_processor.py ├── model_loader.py ├── simplenet.py ├── progress_dialog.py ├── report_generator.py ├── performance_monitor.py ├── exceptions.py ├── config.yaml ├── logs/ # 日志保存目录（自动创建） └── output/ # 检测结果和报告保存目录（自动创建） ","date":"2025-03-06","objectID":"/posts/20250306224715/:3:3","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.7","uri":"/posts/20250306224715/"},{"categories":["项目文档"],"content":"配置 编辑 config.yaml： # Anomaly Detection App 的配置文件 load_mode: preload # 可选：preload（预加载）或 ondemand（按需加载） threshold: 1.2 # 默认阈值，范围 0.0-2.0 models: Metal Nut: models/mvtec_metal_nut/ckpt.pth # 金属螺母检测模型 Screw: models/mvtec_screw/ckpt.pth # 螺丝检测模型 preload: max_preload_threads: 8 # 预加载最大线程数 preload_chunk_size: 100 # 预加载分片大小 use_disk_cache: true # 是否使用磁盘缓存 max_memory_mb: 2048 # 最大内存使用量（MB） batch: max_batch_threads: 12 # 批量检测最大线程数 max_batch_size: 32 # 最大批次大小 load_mode：preload 在启动时加载所有模型，ondemand 在选择时加载。 threshold：初始异常阈值，可通过界面调整。 models：模型名称和路径，路径需指向有效的 .pth 文件。 preload/batch：性能优化参数，可根据硬件调整。 ","date":"2025-03-06","objectID":"/posts/20250306224715/:3:4","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.7","uri":"/posts/20250306224715/"},{"categories":["项目文档"],"content":"运行 确保模型文件路径正确。 进入项目目录： cd anomaly_detection_app 执行： python main.py ","date":"2025-03-06","objectID":"/posts/20250306224715/:3:5","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.7","uri":"/posts/20250306224715/"},{"categories":["项目文档"],"content":"代码结构与模块说明 ","date":"2025-03-06","objectID":"/posts/20250306224715/:4:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.7","uri":"/posts/20250306224715/"},{"categories":["项目文档"],"content":"文件结构 main.py： 程序入口，配置日志，加载 config.yaml，初始化设备和处理器，启动 GUI。 gui.py： 定义图形界面，包括工具栏、选项卡（图像视图和报告）、缩略图、阈值滑块、历史记录对话框和日志区。 处理用户交互（模型选择、检测、阈值调整、报告导出、历史查看）。 image_processor.py： 图像处理核心，支持单张和批量检测，管理模型缓存和性能优化。 model_loader.py： 模型加载逻辑，定义 load_model 函数。 simplenet.py： SimpleNet 模型实现，用于异常检测和热图生成。 progress_dialog.py： 进度对话框，用于模型加载和批量检测进度显示。 report_generator.py： 报告生成模块，统计检测结果，生成图表并支持导出。 performance_monitor.py： 性能监控模块，记录内存、线程和 I/O 使用情况。 exceptions.py： 自定义异常类，用于错误处理。 config.yaml： 配置文件，存储模型列表、加载模式、阈值和性能参数。 ","date":"2025-03-06","objectID":"/posts/20250306224715/:4:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.7","uri":"/posts/20250306224715/"},{"categories":["项目文档"],"content":"核心类与功能 MainWindow (gui.py)： 属性： processor：图像处理器实例。 result_paths：检测结果路径列表。 detection_infos：检测信息列表。 current_index：当前显示图片索引。 current_report：当前报告数据。 threshold：异常阈值。 方法： select_model：选择并加载模型。 detect_single / detect_batch：触发单张或批量检测。 detect_single_drop / detect_batch_drop：处理拖放检测。 update_report：更新报告选项卡和图像视图。 export_report：导出报告为 CSV 或 PDF。 open_history：打开历史记录对话框。 界面元素： 工具栏（“Select Model”、“Detect”、“Options”）。 选项卡（“Image View”和“Report”）。 状态栏、缩略图、阈值滑块、日志区。 ImageProcessor (image_processor.py)： 属性： model_cache：已加载模型缓存。 current_model_name：当前模型名称。 report_generator：报告生成器实例。 方法： set_model：设置当前模型。 detect_single_image：单张检测，返回路径和信息。 detect_batch_images：批量检测，生成报告。 信号： report_generated：批量检测完成后发出报告数据。 优化： 动态批次大小（BatchDetectWorker）。 多线程预加载（ImagePreloader）。 ReportGenerator (report_generator.py)： 属性： output_dir：报告保存目录。 history_file：历史记录文件路径。 方法： generate_report：生成统计信息和图表。 save_history：保存检测报告到历史记录。 export_to_csv / export_to_pdf：导出报告。 功能： 统计异常数量、得分分布和异常程度。 生成直方图和箱线图。 HistoryDialog (gui.py)： 功能：显示历史记录列表，支持双击或“OK”加载报告。 方法： load_history：加载历史记录。 load_selected_report：加载选中的报告。 ","date":"2025-03-06","objectID":"/posts/20250306224715/:4:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.7","uri":"/posts/20250306224715/"},{"categories":["项目文档"],"content":"使用说明 ","date":"2025-03-06","objectID":"/posts/20250306224715/:5:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.7","uri":"/posts/20250306224715/"},{"categories":["项目文档"],"content":"界面布局 工具栏： “Select Model”：选择模型，支持快捷键。 “Detect”：下拉菜单，包含“Single Image”和“Batch Images”。 “Options”：包含“Settings”和“View History”。 状态栏：显示“Model: [模型名] | Image: [图片名] | GPU Memory: [显存使用]”。 左侧区域： “Anomaly Threshold”：滑块调节阈值，实时更新。 “检测信息”：显示异常得分和判断。 右侧区域： 选项卡： “Image View”：显示检测结果（原图+热图）和缩略图。 “Report”：显示统计信息、图表和导出按钮。 缩略图列表：水平滚动，点击切换，悬停显示信息。 日志区：可折叠，默认隐藏。 浮动进度条：检测或加载时显示进度。 ","date":"2025-03-06","objectID":"/posts/20250306224715/:5:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.7","uri":"/posts/20250306224715/"},{"categories":["项目文档"],"content":"操作流程 启动程序： preload 模式：加载所有模型，显示进度。 ondemand 模式：显示“未选择模型”。 选择模型： 点击“Select Model”或按快捷键。 状态栏更新模型名。 单张检测： 点击“Detect -\u003e Single Image”或拖放图片。 显示结果和信息，缩略图显示单张。 批量检测： 点击“Detect -\u003e Batch Images”或拖放文件夹。 显示第一张结果，缩略图列出所有结果，报告选项卡显示统计和图表。 查看报告： 批量检测后自动切换到“Report”选项卡。 点击“Export Report”选择保存路径和格式（CSV/PDF）。 查看历史： 点击“Options -\u003e View History”。 选择记录，双击或点击“OK”加载。 调整阈值： 滑动阈值滑块，实时更新检测信息和 config.yaml。 查看日志： 点击“Show Log”展开日志区。 ","date":"2025-03-06","objectID":"/posts/20250306224715/:5:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.7","uri":"/posts/20250306224715/"},{"categories":["项目文档"],"content":"输出结果 检测结果：./output/[模型目录名]/detection_[输入文件名].png 报告文件： 默认保存至 ./output/reports/，可通过导出选择其他路径。 CSV：包含图像路径、得分和状态。 PDF：包含统计信息和图表。 历史记录：./output/reports/detection_history.json ","date":"2025-03-06","objectID":"/posts/20250306224715/:5:3","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.7","uri":"/posts/20250306224715/"},{"categories":["项目文档"],"content":"维护与扩展 ","date":"2025-03-06","objectID":"/posts/20250306224715/:6:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.7","uri":"/posts/20250306224715/"},{"categories":["项目文档"],"content":"常见问题排查 导出报告失败（KeyError: ‘image_paths’）： 检查历史记录文件是否完整（需包含 image_paths 和 scores）。 重新运行批量检测生成新记录。 历史记录加载无效： 确保 detection_history.json 未损坏。 检查日志确认加载错误。 内存不足： 调整 config.yaml 中的 max_batch_size 或 max_memory_mb。 设置 PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:128。 拖放无效： 检查日志，确保拖放事件被识别。 以管理员权限运行程序（Windows）。 ","date":"2025-03-06","objectID":"/posts/20250306224715/:6:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.7","uri":"/posts/20250306224715/"},{"categories":["项目文档"],"content":"优化建议 性能提升： 使用异步图表生成（ProgressWorker）。 优化 SimpleNet.predict 支持更大批量。 界面增强： 添加图表交互（放大、悬停提示，使用 PyQtGraph）。 支持历史记录筛选（按模型或日期）。 功能扩展： 添加异常原因分析（需模型支持）。 支持清理旧历史记录（按数量或时间）。 模型支持： 抽象模型接口，支持其他架构（如 YOLO）。 ","date":"2025-03-06","objectID":"/posts/20250306224715/:6:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.7","uri":"/posts/20250306224715/"},{"categories":["项目文档"],"content":"代码维护 模块化：GUI、处理、报告和模型逻辑分离。 配置文件：支持动态调整参数（如异常程度阈值）。 日志：详细记录操作和错误。 测试：建议使用 pytest 测试检测、报告和历史功能。 ","date":"2025-03-06","objectID":"/posts/20250306224715/:6:3","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.7","uri":"/posts/20250306224715/"},{"categories":["项目文档"],"content":"版本信息 当前版本：v1.7 更新日期：2025年3月6日 作者：LucaZou 更新记录： v1.0：基本检测功能。 v1.1：多线程支持，界面优化。 v1.2：动态阈值、缩略图导航。 v1.4：YAML 配置、GPU 加速、内存优化。 v1.5：拖放支持、滑块阈值调整。 v1.7：报告模块、历史记录管理、导出功能。 ","date":"2025-03-06","objectID":"/posts/20250306224715/:7:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.7","uri":"/posts/20250306224715/"},{"categories":["项目文档"],"content":" V1.5 ","date":"2025-03-04","objectID":"/posts/20250304154607/:0:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.5","uri":"/posts/20250304154607/"},{"categories":["项目文档"],"content":"Anomaly Detection App 文档 ","date":"2025-03-04","objectID":"/posts/20250304154607/:1:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.5","uri":"/posts/20250304154607/"},{"categories":["项目文档"],"content":"项目概述 Anomaly Detection App 是一个基于 Python 和 PyQt5 的桌面应用程序，旨在利用深度学习模型（如 Wide ResNet50 和 SimpleNet）进行图像异常检测。它支持单张和批量图片处理，提供简洁高效的用户界面，用户可以选择模型、调整异常阈值、查看检测结果，并通过缩略图导航批量结果。应用优化了性能，支持动态内存管理和 GPU 加速，适用于工业检测或其他需要图像异常分析的场景。 ","date":"2025-03-04","objectID":"/posts/20250304154607/:2:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.5","uri":"/posts/20250304154607/"},{"categories":["项目文档"],"content":"示例图 主界面 单张检测 批量检测 ","date":"2025-03-04","objectID":"/posts/20250304154607/:2:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.5","uri":"/posts/20250304154607/"},{"categories":["项目文档"],"content":"主要功能 模型选择：通过“Select Model”下拉菜单选择预定义模型（如“Metal Nut”或“Screw”），支持快捷键（如 Ctrl+1）。 单张检测：检测单张图片，显示结果和异常信息，支持拖放操作。 批量检测：处理文件夹中的多张图片，显示结果并提供缩略图导航，支持拖放文件夹。 结果导航：通过缩略图点击切换批量检测结果（无独立切换按钮）。 状态显示：状态栏显示当前模型和图片名称，左侧显示异常得分及判断。 动态阈值：通过左侧滑块实时调整异常检测阈值（范围 0.0-2.0，默认 1.2）。 性能优化：支持动态批次大小、GPU 加速和多线程预加载，减少内存占用和处理时间。 日志记录：可折叠日志区显示操作和错误信息，保存至文件。 拖放支持：支持将图片或文件夹拖入窗口触发检测。 ","date":"2025-03-04","objectID":"/posts/20250304154607/:2:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.5","uri":"/posts/20250304154607/"},{"categories":["项目文档"],"content":"技术栈 编程语言：Python 3.8+ GUI 框架：PyQt5 深度学习：PyTorch, torchvision 图像处理：Pillow, NumPy, Matplotlib 其他：tqdm（进度条）、logging（日志）、pyyaml（配置文件）、concurrent.futures（多线程） ","date":"2025-03-04","objectID":"/posts/20250304154607/:2:3","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.5","uri":"/posts/20250304154607/"},{"categories":["项目文档"],"content":"安装与运行 ","date":"2025-03-04","objectID":"/posts/20250304154607/:3:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.5","uri":"/posts/20250304154607/"},{"categories":["项目文档"],"content":"环境要求 操作系统：Windows、macOS 或 Linux（跨平台支持） Python：3.8 或更高版本 硬件：支持 CUDA 的 GPU（可选，推荐至少 4 GiB 显存以提升性能） ","date":"2025-03-04","objectID":"/posts/20250304154607/:3:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.5","uri":"/posts/20250304154607/"},{"categories":["项目文档"],"content":"依赖安装 安装所需库： pip install PyQt5 torch torchvision pillow numpy matplotlib tqdm pyyaml torch：若需 GPU 支持，请根据硬件安装对应 CUDA 版本（参考 PyTorch 官网）。 simplenet：如需使用 simplenet.py，从 GitHub 克隆并安装。 ","date":"2025-03-04","objectID":"/posts/20250304154607/:3:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.5","uri":"/posts/20250304154607/"},{"categories":["项目文档"],"content":"项目文件 下载项目代码并确保以下结构完整： anomaly_detection_app/ ├── main.py ├── gui.py ├── image_processor.py ├── model_loader.py ├── simplenet.py ├── progress_dialog.py ├── config.yaml ├── logs/ # 日志保存目录（自动创建） └── output/ # 检测结果保存目录（自动创建） ","date":"2025-03-04","objectID":"/posts/20250304154607/:3:3","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.5","uri":"/posts/20250304154607/"},{"categories":["项目文档"],"content":"配置 编辑 config.yaml： # Anomaly Detection App 的配置文件 load_mode: preload # 可选：preload（预加载）或 ondemand（按需加载） threshold: 1.2 # 默认阈值，范围 0.0-2.0 models: Metal Nut: models/mvtec_metal_nut/ckpt.pth # 金属螺母检测模型 Screw: models/mvtec_screw/ckpt.pth # 螺丝检测模型 load_mode：preload 在启动时加载所有模型，ondemand 在选择时加载。 threshold：初始异常阈值，可通过界面滑块调整。 models：模型名称和路径，路径需指向有效的 .pth 文件。 ","date":"2025-03-04","objectID":"/posts/20250304154607/:3:4","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.5","uri":"/posts/20250304154607/"},{"categories":["项目文档"],"content":"运行 确保模型文件路径正确。 进入项目目录： cd anomaly_detection_app 执行： python main.py ","date":"2025-03-04","objectID":"/posts/20250304154607/:3:5","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.5","uri":"/posts/20250304154607/"},{"categories":["项目文档"],"content":"代码结构与模块说明 ","date":"2025-03-04","objectID":"/posts/20250304154607/:4:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.5","uri":"/posts/20250304154607/"},{"categories":["项目文档"],"content":"文件结构 main.py： 程序入口，加载配置，初始化设备和处理器，启动 GUI。 gui.py： 定义图形界面，包括工具栏、状态栏、图像显示区、缩略图、阈值滑块和日志区。 处理用户交互（模型选择、检测、阈值调整、拖放）。 image_processor.py： 图像处理逻辑，支持单张和批量检测，优化 GPU 内存和 I/O。 model_loader.py： 模型加载逻辑，定义 load_model 函数。 simplenet.py： 实现 SimpleNet 模型，用于异常检测和热图生成。 progress_dialog.py： 定义进度对话框，用于模型加载和检测进度显示。 config.yaml： 配置文件，存储模型列表、加载模式和阈值。 ","date":"2025-03-04","objectID":"/posts/20250304154607/:4:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.5","uri":"/posts/20250304154607/"},{"categories":["项目文档"],"content":"核心类与功能 MainWindow (gui.py)： 属性： processor：图像处理器实例。 result_paths：检测结果路径列表。 detection_infos：检测信息列表。 current_index：当前显示图片索引。 threshold：异常阈值（通过滑块调整）。 方法： select_model：选择并加载模型。 detect_single / detect_batch：触发单张或批量检测。 detect_single_drop / detect_batch_drop：处理拖放检测。 update_threshold：更新阈值并刷新结果。 update_status_bar：更新状态栏信息。 界面元素： 工具栏（“Select Model”、“Detect”、“Options”菜单）。 状态栏（模型名、图片名）。 左侧（阈值滑块、检测信息）。 右侧（图像显示区、缩略图、日志区）。 ImageProcessor (image_processor.py)： 属性： model_cache：已加载模型缓存。 current_model_name：当前模型名称。 output_base_dir：结果输出目录。 方法： set_model：设置当前模型。 detect_single_image：单张检测，返回路径和信息。 detect_batch_images：批量检测，使用线程处理。 优化： 动态 batch_size 根据 GPU 内存。 多线程预加载图片。 GPU 内存清理（torch.cuda.empty_cache()）。 BatchDetectWorker (image_processor.py)： 功能：异步批量检测线程。 优化： 动态调整批次大小。 并行生成热图。 SimpleNet (simplenet.py)： 功能：异常检测模型，基于 Wide ResNet50。 方法： load：加载模型权重。 predict：预测异常得分和热图。 ","date":"2025-03-04","objectID":"/posts/20250304154607/:4:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.5","uri":"/posts/20250304154607/"},{"categories":["项目文档"],"content":"使用说明 ","date":"2025-03-04","objectID":"/posts/20250304154607/:5:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.5","uri":"/posts/20250304154607/"},{"categories":["项目文档"],"content":"界面布局 工具栏： “Select Model”：选择模型，支持快捷键（Ctrl+1 等）。 “Detect”：下拉菜单，包含“Single Image”和“Batch Images”。 “Options”：包含“Settings”（当前为空壳）。 状态栏：显示“Model: [模型名] | Image: [图片名]”。 左侧区域： “Anomaly Threshold”：滑块调节阈值（0.0-2.0），显示当前值。 “检测信息”：显示异常得分和判断（如“异常得分: 1.50 - 检测到异常”）。 右侧区域： 图像显示区：显示检测结果（原图+热图），支持拖放。 缩略图列表：固定高度，水平滚动，点击切换图片，悬浮显示信息。 日志区：可折叠，默认隐藏，显示操作和错误日志。 浮动进度条：检测或加载时显示进度，完成后自动关闭。 ","date":"2025-03-04","objectID":"/posts/20250304154607/:5:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.5","uri":"/posts/20250304154607/"},{"categories":["项目文档"],"content":"操作流程 启动程序： preload 模式：启动时加载所有模型，日志记录加载状态。 ondemand 模式：显示“未选择模型”，需手动选择。 选择模型： 点击“Select Model”或按快捷键选择模型。 状态栏更新模型名。 单张检测： 点击“Detect -\u003e Single Image”选择文件，或拖放图片到窗口。 显示结果和检测信息，缩略图显示单张结果。 批量检测： 点击“Detect -\u003e Batch Images”选择文件夹，或拖放文件夹。 显示第一张结果，缩略图列出所有结果，点击切换。 调整阈值： 滑动左侧阈值滑块，实时更新检测信息和 config.yaml。 查看日志： 点击“Show Log”展开日志区，查看操作详情。 日志保存至 logs/detection_log.txt。 ","date":"2025-03-04","objectID":"/posts/20250304154607/:5:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.5","uri":"/posts/20250304154607/"},{"categories":["项目文档"],"content":"输出结果 保存路径：./output/[模型目录名]/detection_[输入文件名].png 格式：原图和异常热图并排显示。 检测信息：格式如“异常得分: [得分] - [判断]”。 ","date":"2025-03-04","objectID":"/posts/20250304154607/:5:3","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.5","uri":"/posts/20250304154607/"},{"categories":["项目文档"],"content":"维护与扩展 ","date":"2025-03-04","objectID":"/posts/20250304154607/:6:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.5","uri":"/posts/20250304154607/"},{"categories":["项目文档"],"content":"常见问题排查 拖放无效： 检查日志是否记录拖放事件（“检测到拖放事件”）。 确保操作系统支持拖放（Windows 需管理员权限可能影响）。 更新 PyQt5 至最新版本（pip install --upgrade PyQt5）。 模型加载失败： 确认 config.yaml 中路径有效且 .pth 文件存在。 检查 GPU 兼容性（torch.cuda.is_available()）。 内存不足： 减小 image_processor.py 中 max_batch_size（默认 32）。 设置环境变量 PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:128。 检测结果异常： 验证模型输出格式，确保 scores 和 masks 正确解析。 调整阈值范围（当前 0.0-2.0）适配模型得分。 ","date":"2025-03-04","objectID":"/posts/20250304154607/:6:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.5","uri":"/posts/20250304154607/"},{"categories":["项目文档"],"content":"优化建议 性能提升： 使用异步 I/O（如 asyncio）替换线程预加载。 优化 SimpleNet.predict 支持更大批量输入。 界面增强： 添加缩略图右键菜单（导出、删除）。 支持深色模式（通过 QPalette）。 功能扩展： 添加结果导出功能（CSV/JSON），集成到“Options”菜单。 支持检测历史记录和撤销操作。 模型支持： 抽象模型加载接口，支持多种模型类型（不仅仅是 SimpleNet）。 ","date":"2025-03-04","objectID":"/posts/20250304154607/:6:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.5","uri":"/posts/20250304154607/"},{"categories":["项目文档"],"content":"代码维护 模块化：GUI、处理和模型逻辑分离，易于独立修改。 配置文件：config.yaml 支持扩展（如新增模型、参数）。 日志：通过 logging 记录详细操作，便于调试。 测试：建议使用 pytest 添加单元测试，覆盖检测和内存管理。 ","date":"2025-03-04","objectID":"/posts/20250304154607/:6:3","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.5","uri":"/posts/20250304154607/"},{"categories":["项目文档"],"content":"版本信息 当前版本：v1.5 更新日期：2025年3月3日 作者：LucaZou（初始开发） 更新记录： v1.0：基本检测功能。 v1.1：多线程支持，界面优化。 v1.2：动态阈值、缩略图导航。 v1.4：YAML 配置、GPU 加速、内存优化。 v1.5：拖放支持、滑块阈值调整、简洁界面。 ","date":"2025-03-04","objectID":"/posts/20250304154607/:7:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.5","uri":"/posts/20250304154607/"},{"categories":["项目文档"],"content":" V1.4 ","date":"2025-03-02","objectID":"/posts/20250302163145/:0:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":"Anomaly Detection App 文档 ","date":"2025-03-02","objectID":"/posts/20250302163145/:1:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":"项目概述 Anomaly Detection App 是一个基于 Python 和 PyQt5 的桌面应用程序，旨在通过深度学习模型（如 Wide ResNet50 和 SimpleNet）进行图像异常检测。它支持单张图片和批量图片处理，提供直观的用户界面，允许用户选择模型、查看检测结果、切换批量检测结果，并显示详细的检测信息。应用优化了性能，支持动态内存管理和 GPU 加速，适用于工业检测场景。 ","date":"2025-03-02","objectID":"/posts/20250302163145/:2:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":"示例图 主界面 单张检测 批量检测 ","date":"2025-03-02","objectID":"/posts/20250302163145/:2:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":"主要功能 模型选择：通过下拉菜单选择预定义的异常检测模型（如“Metal Nut”或“Screw”）。 单张检测：检测单张图片，显示结果和异常得分（无缩略图显示）。 批量检测：处理文件夹中的多张图片，显示结果并提供滚动缩略图预览。 结果切换：支持“Previous”和“Next”按钮切换批量检测结果。 状态显示：显示当前模型、图片名称和检测信息（异常得分及判断）。 动态阈值：通过设置菜单调整异常检测阈值（默认 0.5，可调整范围 0.0-1.0）。 性能优化：支持动态批次大小和 GPU 加速，减少内存占用和等待时间。 日志记录：操作和错误信息记录到界面及文件。 ","date":"2025-03-02","objectID":"/posts/20250302163145/:2:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":"技术栈 编程语言：Python 3.8+ GUI 框架：PyQt5 深度学习：PyTorch, torchvision 图像处理：Pillow, NumPy, Matplotlib 其他：tqdm（进度条）、logging（日志）、psutil（内存管理）、pyyaml（配置文件） ","date":"2025-03-02","objectID":"/posts/20250302163145/:2:3","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":"安装与运行 ","date":"2025-03-02","objectID":"/posts/20250302163145/:3:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":"环境要求 操作系统：Windows、macOS 或 Linux（跨平台支持） Python：3.8 或更高版本 硬件：支持 CUDA 的 GPU（可选，提升性能，建议至少 4 GiB 显存） ","date":"2025-03-02","objectID":"/posts/20250302163145/:3:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":"依赖安装 安装所需库： pip install PyQt5 torch torchvision pillow numpy matplotlib tqdm psutil pyyaml torch：若需 GPU 支持，请根据硬件安装对应版本（参考 PyTorch 官网）。 simplenet：如果模型依赖自定义模块 simplenet，需从 GitHub 克隆并安装。 ","date":"2025-03-02","objectID":"/posts/20250302163145/:3:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":"项目文件 下载项目代码并确保以下结构完整： anomaly_detection_app/ ├── main.py ├── gui.py ├── image_processor.py ├── model_loader.py ├── simplenet.py ├── common.py ├── config.yaml ├── logs/ # 日志保存目录（自动创建） └── output/ # 检测结果保存目录（自动创建） ","date":"2025-03-02","objectID":"/posts/20250302163145/:3:3","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":"配置 编辑 config.yaml（替代原 config.json）： # Anomaly Detection App 的配置文件 # 定义模型加载模式，可选值：preload（预加载所有模型）或 ondemand（按需加载） load_mode: preload # 模型配置，键为模型名称，值为模型文件的路径 models: # 金属螺母检测模型，路径指向模型权重文件 Metal Nut: models/mvtec_metal_nut/ckpt.pth # 螺丝检测模型，路径指向模型权重文件 Screw: models/mvtec_screw/ckpt.pth load_mode：选择预加载或按需加载模型。 models：模型名称和路径键值对，路径需指向实际 .pth 文件。 ","date":"2025-03-02","objectID":"/posts/20250302163145/:3:4","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":"运行 确保模型文件路径正确。 进入项目目录： cd anomaly_detection_app 执行： python main.py ","date":"2025-03-02","objectID":"/posts/20250302163145/:3:5","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":"代码结构与模块说明 ","date":"2025-03-02","objectID":"/posts/20250302163145/:4:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":"文件结构 main.py： 程序入口，加载 config.yaml，初始化设备和处理器，启动 GUI。 gui.py： 定义图形界面，包括工具栏、图像显示区、切换按钮、状态标签、检测信息和缩略图区域。 处理用户交互（如模型选择、检测、设置）。 image_processor.py： 图像处理逻辑，包括单张和批量检测，支持动态批次大小和 GPU 加速。 model_loader.py： 模型加载逻辑，定义 load_model 函数。 simplenet.py： 实现 SimpleNet 模型，用于图像异常检测和定位。 common.py： 提供辅助类（如 PatchMaker、RescaleSegmentor）和功能。 config.yaml： YAML 配置文件，存储模型列表和加载模式。 ","date":"2025-03-02","objectID":"/posts/20250302163145/:4:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":"核心类与功能 ImageProcessor (image_processor.py)： 属性： model_cache：存储已加载模型。 current_model_name：当前模型名称。 output_base_dir：输出目录。 batch_worker：批量检测线程对象。 方法： set_model：设置当前模型，支持缓存或按需加载。 detect_single_image：检测单张图片，返回结果路径和检测信息。 detect_batch_images：异步批量检测，支持动态批次大小和 GPU 加速。 优化： 动态调整 batch_size 根据 GPU 可用内存。 多线程预加载图片，减少 I/O 等待。 使用 torch.cuda.empty_cache() 管理 GPU 内存。 MainWindow (gui.py)： 属性： result_paths：存储检测结果路径。 detection_infos：存储检测信息。 current_index：当前显示图片的索引。 threshold：动态异常检测阈值（默认 0.5）。 方法： select_model：处理模型选择。 detect_single / detect_batch：触发检测。 prev_image / next_image：切换图片并更新检测信息。 open_settings：打开设置窗口，调整阈值。 界面元素： 工具栏（模型选择、检测、设置）。 状态标签（模型名、图片名、检测信息）。 图像显示区、切换按钮、滚动缩略图、进度条、日志区。 SimpleNet (simplenet.py)： 实现图像异常检测和定位，基于 Wide ResNet50 骨干网络和 SimpleNet 架构。 方法： load：加载模型和配置。 predict：单张或批量预测异常得分和热图。 fit：训练判别器，优化异常检测性能。 优化： 支持批量输入（需确保 predict 适配批量张量）。 ","date":"2025-03-02","objectID":"/posts/20250302163145/:4:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":"使用说明 ","date":"2025-03-02","objectID":"/posts/20250302163145/:5:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":"界面布局 工具栏： “Select Model”：下拉菜单选择模型。 “Detect Single Image”：单张检测（无缩略图）。 “Detect Batch Images”：批量检测（显示滚动缩略图）。 “Settings”：打开设置窗口，调整阈值。 状态区： “当前模型”：显示选择的模型名称。 “当前图片”：显示当前图片文件名。 “检测信息”：显示异常得分和判断（如“异常得分: 0.75 - 检测到异常”）。 图像显示区：显示检测结果（原图+热图）。 切换按钮： “Previous”：切换到上一张图片（批量检测时可用）。 “Next”：切换到下一张图片（批量检测时可用）。 缩略图区域（仅批量检测显示）： 滚动显示所有批量检测结果的缩略图（仅图标，无文件名），点击跳转到对应图片。 进度条：批量检测时显示进度。 日志区：显示操作日志和错误信息。 ","date":"2025-03-02","objectID":"/posts/20250302163145/:5:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":"操作流程 启动程序： 预加载模式：启动时加载所有模型，日志记录加载状态。 按需加载模式：显示“未选择模型”，需手动选择。 选择模型： 点击“Select Model”，选择模型（如“Metal Nut”）。 状态栏更新为“当前模型: [模型名]”。 单张检测： 点击“Detect Single Image”，选择图片。 显示结果和检测信息，缩略图区域隐藏，切换按钮禁用。 批量检测： 点击“Detect Batch Images”，选择文件夹。 处理完成后显示第一张结果及检测信息，缩略图区域显示所有结果，切换按钮启用。 使用滚动条浏览缩略图，点击跳转到对应图片。 调整阈值： 点击“Settings”，输入新阈值（范围 0.0-1.0），保存后更新检测信息。 查看日志： 日志区实时显示操作信息，保存至 logs/detection_log.txt。 ","date":"2025-03-02","objectID":"/posts/20250302163145/:5:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":"输出结果 保存路径：./output/[模型目录名]/detection_[输入文件名].png 格式：并排显示原图和异常热图。 检测信息：包含异常得分和判断（例如“异常得分: 0.75 - 检测到异常”）。 ","date":"2025-03-02","objectID":"/posts/20250302163145/:5:3","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":"维护与扩展 ","date":"2025-03-02","objectID":"/posts/20250302163145/:6:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":"常见问题排查 模型加载失败： 检查 config.yaml 中的路径是否正确。 确保 .pth 文件存在且未损坏。 内存不足： 调整 image_processor.py 中的 batch_size（默认 8），减少到 4 或 2。 设置 PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:128 优化内存碎片。 界面卡顿： 确保 GPU 驱动和 PyTorch 版本匹配，检查 nvidia-smi 监控 GPU 利用率。 检测信息错误： 若异常得分显示异常，确认模型输出 scores 的格式并调整阈值。 依赖缺失： 确保所有库已安装，尤其是 simplenet 和 psutil。 ","date":"2025-03-02","objectID":"/posts/20250302163145/:6:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":"优化建议 动态内存管理： 进一步优化 _estimate_batch_size，实时监控 GPU 可用内存，动态调整 batch_size。 异步 I/O： 使用 asyncio 或 concurrent.futures 替换 threading，提升图片预加载效率。 模型优化： 调整 simplenet.SimpleNet.predict 支持更高效的批量处理，减少内存峰值。 结果预览增强： 添加缩略图工具提示，显示检测信息。 多语言支持： 使用 QTranslator 支持界面多语言切换。 ","date":"2025-03-02","objectID":"/posts/20250302163145/:6:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":"代码维护 模块化：逻辑已拆分为独立模块（GUI、处理、加载、模型），便于单独修改。 配置文件：config.yaml 支持复杂结构，新增模型只需更新配置文件。 日志：通过 logging 模块记录详细运行信息，便于调试。 性能测试：使用 unittest 或 pytest 编写单元测试，覆盖批量检测和内存管理。 ","date":"2025-03-02","objectID":"/posts/20250302163145/:6:3","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":"版本信息 当前版本：v1.4 更新日期：2025年3月2日 作者：LucaZou 更新记录： v1.0：初始版本，支持基本检测功能。 v1.1：添加多线程支持，优化界面响应。 v1.2：新增检测信息显示、动态阈值、缩略图预览。 v1.4：支持 .yaml 配置文件、动态批次大小、GPU 加速和内存优化。 如需进一步支持或功能扩展，请联系开发团队或参考代码注释。 ","date":"2025-03-02","objectID":"/posts/20250302163145/:7:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":"文档说明 准确性：文档反映了项目的最新状态，包括所有优化（如动态批次、预加载、GPU 加速）。 完整性：涵盖了安装、运行、使用和维护的所有必要信息。 可扩展性：提供了优化建议，便于未来开发。 ","date":"2025-03-02","objectID":"/posts/20250302163145/:7:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.4","uri":"/posts/20250302163145/"},{"categories":["项目文档"],"content":" V1.2 ","date":"2025-03-02","objectID":"/posts/20250302162447/:0:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.2","uri":"/posts/20250302162447/"},{"categories":["项目文档"],"content":"Anomaly Detection App 文档 ","date":"2025-03-02","objectID":"/posts/20250302162447/:1:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.2","uri":"/posts/20250302162447/"},{"categories":["项目文档"],"content":"项目概述 Anomaly Detection App 是一个基于 Python 和 PyQt5 的桌面应用程序，旨在通过深度学习模型（如 Wide ResNet50 和 SimpleNet）进行图像异常检测。它支持单张图片和批量图片处理，提供直观的用户界面，允许用户选择模型、查看检测结果、切换批量检测结果，并显示详细的检测信息。 ","date":"2025-03-02","objectID":"/posts/20250302162447/:2:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.2","uri":"/posts/20250302162447/"},{"categories":["项目文档"],"content":"示例图 主界面 预加载模式可快速切换模型 单张检测 批量检测 按键切换图片 ","date":"2025-03-02","objectID":"/posts/20250302162447/:2:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.2","uri":"/posts/20250302162447/"},{"categories":["项目文档"],"content":"主要功能 模型选择：通过下拉菜单选择预定义的异常检测模型。 单张检测：检测单张图片并显示结果及异常得分。 批量检测：处理文件夹中的多张图片，逐张显示结果及检测信息。 结果切换：支持“Previous”和“Next”按钮切换批量检测结果。 状态显示：显示当前模型、图片名称和检测信息（异常得分及判断）。 日志记录：操作和错误信息记录到界面及文件。 灵活配置：通过 JSON 文件管理模型列表和加载模式。 ","date":"2025-03-02","objectID":"/posts/20250302162447/:2:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.2","uri":"/posts/20250302162447/"},{"categories":["项目文档"],"content":"技术栈 编程语言：Python 3.8+ GUI 框架：PyQt5 深度学习：PyTorch, torchvision 图像处理：Pillow, NumPy, Matplotlib 其他：tqdm（进度条）, logging（日志） ","date":"2025-03-02","objectID":"/posts/20250302162447/:2:3","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.2","uri":"/posts/20250302162447/"},{"categories":["项目文档"],"content":"安装与运行 ","date":"2025-03-02","objectID":"/posts/20250302162447/:3:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.2","uri":"/posts/20250302162447/"},{"categories":["项目文档"],"content":"环境要求 操作系统：Windows、macOS 或 Linux（跨平台支持） Python：3.8 或更高版本 硬件：支持 CUDA 的 GPU（可选，提升性能） ","date":"2025-03-02","objectID":"/posts/20250302162447/:3:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.2","uri":"/posts/20250302162447/"},{"categories":["项目文档"],"content":"依赖安装 安装所需库： pip install PyQt5 torch torchvision pillow numpy matplotlib tqdm torch：若需 GPU 支持，请根据硬件安装对应版本（参考 PyTorch 官网）。 simplenet：若模型依赖自定义模块 simplenet，需自行提供或安装。 ","date":"2025-03-02","objectID":"/posts/20250302162447/:3:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.2","uri":"/posts/20250302162447/"},{"categories":["项目文档"],"content":"项目文件 下载项目代码并确保以下结构完整： anomaly_detection_app/ ├── main.py ├── gui.py ├── image_processor.py ├── model_loader.py ├── config.json ├── logs/ # 日志保存目录（自动创建） └── output/ # 检测结果保存目录（自动创建） ","date":"2025-03-02","objectID":"/posts/20250302162447/:3:3","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.2","uri":"/posts/20250302162447/"},{"categories":["项目文档"],"content":"配置 编辑 config.json： { \"load_mode\": \"preload\", \"models\": { \"Metal Nut\": \"models/mvtec_metal_nut/ckpt.pth\", \"Screw\": \"models/mvtec_screw/ckypt.pth\" } } load_mode： \"preload\"：启动时加载所有模型，切换无需等待。 \"ondemand\"：启动后按需加载模型，加快启动速度。 models：模型名称和路径键值对，路径需指向实际 .pth 文件。 ","date":"2025-03-02","objectID":"/posts/20250302162447/:3:4","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.2","uri":"/posts/20250302162447/"},{"categories":["项目文档"],"content":"运行 确保模型文件路径正确。 进入项目目录： cd anomaly_detection_app 执行： python main.py ","date":"2025-03-02","objectID":"/posts/20250302162447/:3:5","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.2","uri":"/posts/20250302162447/"},{"categories":["项目文档"],"content":"代码结构与模块说明 ","date":"2025-03-02","objectID":"/posts/20250302162447/:4:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.2","uri":"/posts/20250302162447/"},{"categories":["项目文档"],"content":"文件结构 main.py： 程序入口，加载配置，初始化设备和处理器，启动 GUI。 gui.py： 定义图形界面，包括工具栏、图像显示区、切换按钮、状态标签和日志区。 处理用户交互（如模型选择、检测操作）。 image_processor.py： 图像处理逻辑，包括单张和批量检测，支持多线程。 model_loader.py： 模型加载逻辑，定义 load_model 函数。 config.json： 配置文件，存储模型列表和加载模式。 ","date":"2025-03-02","objectID":"/posts/20250302162447/:4:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.2","uri":"/posts/20250302162447/"},{"categories":["项目文档"],"content":"核心类与功能 ImageProcessor (image_processor.py)： 属性： model_cache：存储已加载模型。 current_model_name：当前模型名称。 output_base_dir：根据模型路径动态生成的输出目录。 batch_worker：批量检测线程对象。 方法： set_model：设置当前模型，支持缓存或按需加载。 detect_single_image：检测单张图片，返回结果路径和检测信息。 detect_batch_images：异步处理批量图片，返回结果路径和检测信息。 信号： progress_updated：更新批量处理进度。 log_message：发送日志消息。 batch_finished：批量处理完成，返回结果列表。 MainWindow (gui.py)： 属性： result_paths：存储检测结果路径。 detection_infos：存储检测信息。 current_index：当前显示图片的索引。 方法： select_model：处理模型选择。 detect_single / detect_batch：触发检测。 prev_image / next_image：切换图片并更新检测信息。 界面元素： 工具栏（模型选择、检测操作）。 状态标签（模型名、图片名、检测信息）。 图像显示区、切换按钮、进度条、日志区。 load_model (model_loader.py)： 加载 Wide ResNet50 模型及其权重，支持自定义参数。 ","date":"2025-03-02","objectID":"/posts/20250302162447/:4:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.2","uri":"/posts/20250302162447/"},{"categories":["项目文档"],"content":"使用说明 ","date":"2025-03-02","objectID":"/posts/20250302162447/:5:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.2","uri":"/posts/20250302162447/"},{"categories":["项目文档"],"content":"界面布局 工具栏： “Select Model”：下拉菜单选择模型。 “Detect Single Image”：单张检测。 “Detect Batch Images”：批量检测。 状态区： “当前模型”：显示选择的模型名称。 “当前图片”：显示当前图片文件名。 “检测信息”：显示异常得分和判断结果（如“异常得分: 0.75 - 检测到异常”）。 图像显示区：显示检测结果（原图+热图）。 切换按钮： “Previous”：切换到上一张图片（批量检测时可用）。 “Next”：切换到下一张图片（批量检测时可用）。 进度条：批量检测时显示进度。 日志区：显示操作日志和错误信息。 ","date":"2025-03-02","objectID":"/posts/20250302162447/:5:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.2","uri":"/posts/20250302162447/"},{"categories":["项目文档"],"content":"操作流程 启动程序： 预加载模式：启动时加载所有模型，日志记录加载状态。 按需加载模式：显示“未选择模型”，需手动选择。 选择模型： 点击“Select Model”，选择模型（如“Metal Nut”）。 状态栏更新为“当前模型: [模型名]”。 单张检测： 点击“Detect Single Image”，选择图片。 显示结果和检测信息，切换按钮禁用。 批量检测： 点击“Detect Batch Images”，选择文件夹。 处理完成后显示第一张结果及检测信息，“Previous”和“Next”按钮启用。 点击切换按钮，图片和检测信息同步更新。 查看日志： 日志区实时显示操作信息，保存至 logs/detection_log.txt。 ","date":"2025-03-02","objectID":"/posts/20250302162447/:5:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.2","uri":"/posts/20250302162447/"},{"categories":["项目文档"],"content":"输出结果 保存路径：./output/[模型目录名]/detection_[输入文件名].png 格式：并排显示原图和异常热图。 检测信息：包含异常得分和判断（例如“异常得分: 0.75 - 检测到异常”）。 ","date":"2025-03-02","objectID":"/posts/20250302162447/:5:3","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.2","uri":"/posts/20250302162447/"},{"categories":["项目文档"],"content":"维护与扩展 ","date":"2025-03-02","objectID":"/posts/20250302162447/:6:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.2","uri":"/posts/20250302162447/"},{"categories":["项目文档"],"content":"常见问题排查 模型加载失败： 检查 config.json 中的路径是否正确。 确保 .pth 文件存在且未损坏。 界面卡顿： 批量检测已使用多线程支持，若仍有问题，检查硬件性能。 检测信息错误： 若异常得分显示异常，确认模型输出 scores 的格式并调整阈值。 依赖缺失： 确保所有库已安装，尤其是 simplenet（若为自定义模块）。 ","date":"2025-03-02","objectID":"/posts/20250302162447/:6:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.2","uri":"/posts/20250302162447/"},{"categories":["项目文档"],"content":"扩展建议 动态阈值： 添加界面调整异常阈值的功能。 结果预览： 添加缩略图列表，点击跳转到对应图片。 多语言支持： 支持界面文本的多语言切换。 性能优化： 使用 GPU 批量推理加速检测。 导出功能： 支持将检测结果和信息导出为 CSV 或报告。 ","date":"2025-03-02","objectID":"/posts/20250302162447/:6:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.2","uri":"/posts/20250302162447/"},{"categories":["项目文档"],"content":"代码维护 模块化：逻辑已拆分为独立模块，便于单独修改。 配置文件：新增模型只需更新 config.json。 日志：通过 logging 模块记录详细运行信息，便于调试。 ","date":"2025-03-02","objectID":"/posts/20250302162447/:6:3","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.2","uri":"/posts/20250302162447/"},{"categories":["项目文档"],"content":"版本信息 当前版本：v1.2 更新日期：2025年3月5日 作者：LucaZou 更新记录： v1.0：初始版本，支持基本检测功能。 v1.2：添加多线程支持，优化界面响应;新增检测信息显示，修复批量检测切换问题。 ","date":"2025-03-02","objectID":"/posts/20250302162447/:7:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App V1.2","uri":"/posts/20250302162447/"},{"categories":["项目文档"],"content":" 摘要：v1.1 ","date":"2025-03-01","objectID":"/posts/20250301141824/:0:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App 文档","uri":"/posts/20250301141824/"},{"categories":["项目文档"],"content":"Anomaly Detection App 文档 ","date":"2025-03-01","objectID":"/posts/20250301141824/:1:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App 文档","uri":"/posts/20250301141824/"},{"categories":["项目文档"],"content":"项目概述 Anomaly Detection App 是一个基于 Python 和 PyQt5 的桌面应用程序，用于图像异常检测。它利用深度学习模型（如 Wide ResNet50）对输入图像进行异常检测，支持单张图片和批量图片处理。应用程序提供直观的图形界面，允许用户选择模型、查看检测结果、切换批量处理结果，并记录日志。 ","date":"2025-03-01","objectID":"/posts/20250301141824/:2:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App 文档","uri":"/posts/20250301141824/"},{"categories":["项目文档"],"content":"示例图 单个检测 批量检测 ","date":"2025-03-01","objectID":"/posts/20250301141824/:2:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App 文档","uri":"/posts/20250301141824/"},{"categories":["项目文档"],"content":"主要功能 模型选择: 通过下拉菜单选择预定义的异常检测模型。 单张检测: 检测单张图片并显示结果。 批量检测: 处理文件夹中的多张图片，逐张显示结果。 结果切换: 批量检测后支持通过“Next”按钮切换图片。 状态显示: 显示当前模型和图片名称。 日志记录: 操作和错误信息记录到界面及文件。 灵活配置: 通过 JSON 配置文件管理模型列表和加载模式。 ","date":"2025-03-01","objectID":"/posts/20250301141824/:2:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App 文档","uri":"/posts/20250301141824/"},{"categories":["项目文档"],"content":"技术栈 编程语言: Python 3.8+ GUI 框架: PyQt5 深度学习: PyTorch, torchvision 图像处理: Pillow, NumPy, Matplotlib 其他: tqdm（进度条）, logging（日志） ","date":"2025-03-01","objectID":"/posts/20250301141824/:2:3","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App 文档","uri":"/posts/20250301141824/"},{"categories":["项目文档"],"content":"安装与运行 ","date":"2025-03-01","objectID":"/posts/20250301141824/:3:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App 文档","uri":"/posts/20250301141824/"},{"categories":["项目文档"],"content":"环境要求 操作系统: Windows, macOS, 或 Linux（跨平台支持） Python: 3.8 或更高版本 硬件: 支持 CUDA 的 GPU（可选，提升性能） ","date":"2025-03-01","objectID":"/posts/20250301141824/:3:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App 文档","uri":"/posts/20250301141824/"},{"categories":["项目文档"],"content":"依赖安装 安装所需库： pip install PyQt5 torch torchvision pillow numpy matplotlib tqdm torch: 若需 GPU 支持，请根据硬件安装对应版本（参考 PyTorch 官网）。 simplenet: 如果你的模型依赖自定义模块 simplenet，需自行提供或安装。 ","date":"2025-03-01","objectID":"/posts/20250301141824/:3:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App 文档","uri":"/posts/20250301141824/"},{"categories":["项目文档"],"content":"项目文件 下载项目代码并确保以下结构完整： anomaly_detection_app/ ├── main.py ├── gui.py ├── image_processor.py ├── model_loader.py ├── config.json ├── logs/ # 日志保存目录（自动创建） └── output/ # 检测结果保存目录（自动创建） ","date":"2025-03-01","objectID":"/posts/20250301141824/:3:3","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App 文档","uri":"/posts/20250301141824/"},{"categories":["项目文档"],"content":"配置 编辑 config.json： { \"load_mode\": \"preload\", \"models\": { \"Metal Nut\": \"models/mvtec_metal_nut/ckpt.pth\", \"Screw\": \"D:\\\\Projects_D\\\\Graduation-Project\\\\preject\\\\anomaly_detection_application\\\\models\\\\mvtec_screw\\\\ckpt.pth\" } } load_mode: \"preload\": 启动时加载所有模型，切换无需等待。 \"ondemand\": 启动后手动选择加载，加快启动速度。 models: 模型名称和路径键值对，路径需指向实际 .pth 文件。 ","date":"2025-03-01","objectID":"/posts/20250301141824/:3:4","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App 文档","uri":"/posts/20250301141824/"},{"categories":["项目文档"],"content":"运行 确保模型文件路径正确。 进入项目目录： cd anomaly_detection_app 执行： python main.py ","date":"2025-03-01","objectID":"/posts/20250301141824/:3:5","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App 文档","uri":"/posts/20250301141824/"},{"categories":["项目文档"],"content":"代码结构与模块说明 ","date":"2025-03-01","objectID":"/posts/20250301141824/:4:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App 文档","uri":"/posts/20250301141824/"},{"categories":["项目文档"],"content":"文件结构 main.py: 程序入口，加载配置，初始化设备和处理器，启动 GUI。 gui.py: 定义图形界面，包括工具栏、图像显示区、切换按钮、状态标签和日志区。 处理用户交互（如模型选择、检测操作）。 image_processor.py: 图像处理逻辑，包括单张和批量检测，管理模型缓存和输出路径。 model_loader.py: 模型加载逻辑，定义 load_model 函数。 config.json: 配置文件，存储模型列表和加载模式。 ","date":"2025-03-01","objectID":"/posts/20250301141824/:4:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App 文档","uri":"/posts/20250301141824/"},{"categories":["项目文档"],"content":"核心类与功能 ImageProcessor (image_processor.py): 属性: model_cache: 存储已加载模型。 current_model_name: 当前模型名称。 output_base_dir: 根据模型路径动态生成的输出目录。 方法: set_model: 设置当前模型，支持缓存或按需加载。 detect_single_image: 处理单张图片。 detect_batch_images: 处理批量图片，返回结果路径列表。 信号: progress_updated: 更新批量处理进度。 log_message: 发送日志消息。 batch_finished: 批量处理完成，返回结果路径。 MainWindow (gui.py): 属性: result_paths: 存储检测结果路径。 current_index: 当前显示图片的索引。 current_model_name: 当前模型名称。 方法: select_model: 处理模型选择。 detect_single / detect_batch: 触发检测。 prev_image / next_image: 切换图片（Previous 禁用）。 update_buttons: 动态调整按钮状态。 界面元素: 工具栏（模型选择、检测操作）。 状态标签（模型名、图片名）。 图像显示区、切换按钮、进度条、日志区。 load_model (model_loader.py): 加载 Wide ResNet50 模型及其权重，支持自定义参数。 ","date":"2025-03-01","objectID":"/posts/20250301141824/:4:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App 文档","uri":"/posts/20250301141824/"},{"categories":["项目文档"],"content":"使用说明 ","date":"2025-03-01","objectID":"/posts/20250301141824/:5:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App 文档","uri":"/posts/20250301141824/"},{"categories":["项目文档"],"content":"界面布局 工具栏: “Select Model”: 下拉菜单选择模型。 “Detect Single Image”: 单张检测。 “Detect Batch Images”: 批量检测。 状态区: “当前模型”: 显示选择的模型名称。 “当前图片”: 显示当前图片文件名。 图像显示区: 显示检测结果（原图+热图）。 切换按钮: “Previous”: 始终禁用。 “Next”: 批量检测时启用，切换下一张。 进度条: 批量检测时显示进度。 日志区: 显示操作日志和错误信息。 ","date":"2025-03-01","objectID":"/posts/20250301141824/:5:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App 文档","uri":"/posts/20250301141824/"},{"categories":["项目文档"],"content":"操作流程 启动程序: 预加载模式：启动时加载所有模型，日志记录加载状态。 按需加载模式：启动后显示“未选择模型”，需手动选择。 选择模型: 点击“Select Model”，从下拉菜单选择模型（如“Metal Nut”）。 状态栏更新为“当前模型: [模型名]”。 单张检测: 点击“Detect Single Image”，选择图片文件。 显示结果，切换按钮禁用，状态栏显示文件名。 批量检测: 点击“Detect Batch Images”，选择文件夹。 处理完成后显示第一张结果，进度条消失，“Next”按钮启用。 点击“Next”切换下一张，状态栏更新文件名。 查看日志: 日志区实时显示操作信息，保存至 logs/detection_log.txt。 ","date":"2025-03-01","objectID":"/posts/20250301141824/:5:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App 文档","uri":"/posts/20250301141824/"},{"categories":["项目文档"],"content":"输出结果 保存路径: ./output/[模型目录名]/detection_[输入文件名].png。 格式: 并排显示原图和异常热图。 ","date":"2025-03-01","objectID":"/posts/20250301141824/:5:3","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App 文档","uri":"/posts/20250301141824/"},{"categories":["项目文档"],"content":"维护与扩展 ","date":"2025-03-01","objectID":"/posts/20250301141824/:6:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App 文档","uri":"/posts/20250301141824/"},{"categories":["项目文档"],"content":"常见问题排查 模型加载失败: 检查 config.json 中的路径是否正确。 确保 .pth 文件存在且未损坏。 界面卡顿: 批量检测可能阻塞 GUI，考虑添加多线程支持。 依赖缺失: 确认所有库已安装，尤其是 simplenet（若为自定义模块）。 ","date":"2025-03-01","objectID":"/posts/20250301141824/:6:1","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App 文档","uri":"/posts/20250301141824/"},{"categories":["项目文档"],"content":"扩展建议 多线程支持: 使用 QThread 将检测任务移至后台，避免界面卡顿。 动态配置: 添加界面修改 config.json 的功能，支持保存。 结果预览: 添加缩略图列表，点击跳转到对应图片。 参数调整: 提供界面调整图像预处理参数（如 transform）。 进度增强: 预加载模型时显示进度条。 ","date":"2025-03-01","objectID":"/posts/20250301141824/:6:2","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App 文档","uri":"/posts/20250301141824/"},{"categories":["项目文档"],"content":"代码维护 模块化: 逻辑已拆分为独立模块（GUI、处理、加载），便于单独修改。 配置文件: 新增模型只需更新 config.json，无需改代码。 日志: 通过 logging 模块记录详细运行信息，便于调试。 ","date":"2025-03-01","objectID":"/posts/20250301141824/:6:3","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App 文档","uri":"/posts/20250301141824/"},{"categories":["项目文档"],"content":"版本信息 当前版本: v1.1 更新日期: 2025年2月28日 作者: LucaZou ","date":"2025-03-01","objectID":"/posts/20250301141824/:7:0","tags":["PyQt","异常检测","计算机视觉"],"title":"Anomaly Detection App 文档","uri":"/posts/20250301141824/"}]